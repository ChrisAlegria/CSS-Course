/* CSS: Es piel, ropa y maquillaje. */
/* CamelCase: El camelCase es una convención de escritura que se utiliza en programación para nombrar variables, funciones, clases, etc. Se escribe en minúsculas y cada palabra adicional comienza con mayúscula. Por ejemplo, "miVariable", "miFuncion", "miClasePersonalizada". */
/* Comentario y comentario multilinea: Texto o codigo que solamente el desarrollador puede ver, ademas estos no tendran ningun efecto en lo que visualiza el usuario, por lo que de manera global y en cualquier lenguaje se puede generar un comentarios con Ctrl + }. */
/* ";": El ";" indica unicamente el final de una declaración, si no se usa, el lenguaje interpretará que la declaración continúa. */
/* Hexadecimal: Es un codigo de 6 letras y numeros que se utilizan para representar colores. */
/* RGB: Es un modelo de color que se basa en la mezcla de los colores rojo, verde y azul, los cuales se combinan en diferentes proporciones para crear una amplia gama de colores. A diferencia de la mezcla de colores en pinturas o tintas, donde los colores se oscurecen al combinarse, en RGB los colores se iluminan más al mezclarse. Este modelo fue diseñado para pantallas y dispositivos digitales, ya que funciona mediante la emisión de luz, donde el color blanco se obtiene combinando los tres colores al máximo nivel y el negro se obtiene con la ausencia de luz. */ 
/* HSL: El modelo de color HSL (Hue, Saturation, Lightness) se basa en tres componentes: tonalidad, saturación y luminosidad, que se combinan en diferentes proporciones para generar una amplia gama de colores. A diferencia del modelo RGB, que se basa en la mezcla de colores primarios, HSL se enfoca en cómo percibimos los colores, lo que lo hace más intuitivo y fácil de usar. En HSL, la tonalidad (Hue) representa el color básico, la saturación (Saturation) define la intensidad o pureza del color, y la luminosidad (Lightness) indica qué tan claro o oscuro es el color. Este modelo es útil para diseñar colores de manera más visual y cercana a cómo los humanos percibimos las variaciones de color. */  
/* Funciones transparencia de colores: La transparencia en los colores permite que un color no sea completamente sólido, sino que se mezcle con el fondo o con otros colores. Esto significa que, si un elemento con color transparente se coloca encima de otro color, ambos se combinarán visualmente, haciendo que el elemento transparente se vea como si mezcláramos su color con el del fondo. Además, un elemento con transparencia también deja ver parcialmente los elementos que están detrás de él. Por ejemplo, si colocas un cuadro rojo semitransparente sobre una imagen de fondo, el cuadro se verá rojo pero permitirá ver la imagen detrás de él. */

/*^CSS*/
/* ? Propiedades de cualquier declaración CSS:
? {}: Toda declaración en CSS, fuera de los estilos directos en etiquetas mediante la propiedad "style", debe ir acompañada de llaves después del selector. Estas llaves permiten declarar los estilos dentro de ellas y actúan como delimitadores, indicando hasta dónde se aplican los estilos a un elemento, clase, etc. 
? ":": Se usan los ":" en la propiedad de la declaracion para separar la propiedad de su valor. Por ejemplo, "color: red;". 
? ";": Se usan los ";" al final de cada declaración para indicar que la declaración ha finalizado. Por ejemplo, "color: red;". */

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Tipos de declaraciones CSS /*
/* Todo - Declaración de estilos mediante una hoja CSS o etiqueta <style>: Los estilos pueden declararse mediante una hoja CSS externa o directamente dentro de la etiqueta <style> en el archivo HTML. En el caso de la hoja CSS, se vincula al HTML mediante un enlace <link>, permitiendo que el HTML lea y aplique todos los estilos definidos en ella. Por otro lado, la etiqueta <style> funciona de manera similar, pero los estilos se colocan directamente dentro del archivo HTML entre las etiquetas <style> y </style>, sin necesidad de archivo externo. */
/* &Estructura de estilos en hoja CSS o etiqueta <style>. */
/* ?Propiedades:  
? Selector: Es el elemento o clase al que se le aplicará el estilo. Por ejemplo, si usas "p", seleccionas todos los párrafos para aplicarles el estilo. Si usas una clase como ".mi-clase", solo los elementos con esa clase recibirán el estilo.
? Propiedad: Es la característica que quieres cambiar en un elemento. Por ejemplo, "color" te permite cambiar el color de algo, y "font-size" te permite cambiar el tamaño del texto. Cada propiedad controla un aspecto diferente del elemento. 
? Valor: Es lo que asignas a una propiedad para definir cómo se comporta. Por ejemplo para "color", usas un valor como "red" para indicar un color, para "font-size", usas un valor como "10px" para indicar el tamaño. Cada propiedad requiere un tipo específico de valor según su función. */ 
.estructura{ /**Selector.**/       
    color: /**Propiedad.**/
    red; /**Valor de la propiedad**/
}

/* Todo - Declaración de estilos en etiqueta HTML mediante la propiedad "style":  Los estilos declarados con la propiedad style="" se aplican exclusivamente a la etiqueta en la que se especifica la propiedad. Dentro de esta propiedad no es necesario usar un selector, ya que el estilo se asigna directamente al elemento en cuestión. */
/* &Estructura de estilos en etiquta HTML mediante la propiedad "style". */
/* ?Propiedades:  
? Propiedad: Es la parte dentro de una etiqueta HTML que se usa para declarar estilos directamente. Por ejemplo, en <p style="">, "style" es la propiedad que indica que dentro de las comillas se escribirán los estilos. 
? Propiedad: Es la característica que quieres cambiar en un elemento. Por ejemplo, "color" te permite cambiar el color de algo, y "font-size" te permite cambiar el tamaño del texto. Cada propiedad controla un aspecto diferente del elemento. 
? Valor: Es lo que asignas a una propiedad para definir cómo se comporta. Por ejemplo para "color", usas un valor como "red" para indicar un color, para "font-size", usas un valor como "10px" para indicar el tamaño. Cada propiedad requiere un tipo específico de valor según su función. *//*
style=" /**Atributo.*
color: /**Propiedad*
red;" /**Valor**/

/* Todo - Declaración: Una declaración es el conjunto de la estructura que incluye el "selector/atributo", la "propiedad" y el "valor de la propiedad**. En CSS, cada declaración se escribe entre llaves {}. */
.declaracion{
color: red; /** Declaración: propiedad + valor **/
}

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Selectores /*
/* Todo - Selectores de elemento (nombreElemento{}): Los selectores de elemento se utilizan para aplicar estilos a todas las instancias de una etiqueta HTML específica. Esto significa que, cuando usas el nombre de una etiqueta, como "h1{}", los estilos dentro de ese selector afectarán a todos los elementos de ese tipo en la página. Por ejemplo, si escribes "h1 { color: red; }", todas las etiquetas <h1> en la página se pondrán rojas. */
h1{ /**Declaracion de selector por elemento, en este caso se declara la etiqueta <h1>.**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector por elemento.**/

/* Todo - Selectores de clase (.nombreClase{}): Los selectores de clase se utilizan para aplicar estilos a un grupo específico de elementos que comparten la misma clase (la cual se establece en las etiquetas mediante la propiedad class=""). Esto significa que, cuando usas un punto seguido de un nombre de clase, como ".mi-clase{}", los estilos dentro de ese selector afectarán a todos los elementos que tengan esa clase en la página. Por ejemplo, si escribes ".mi-clase { font-size: 20px; }", todos los elementos con la clase "mi-clase" tendrán un tamaño de fuente de 20 píxeles, por lo que uno o varios elementos pueden tener la misma clase a los cuales se les aplicaran los mimos estilos. */
.mi-clase{ /**Declaracion de selector por clase, en este caso se declara la clase "mi-clase".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector por clase.**/

/* Todo - Selector de identificador (#nombreIdentificador): Los selectores de identificador se utilizan para aplicar estilos a un elemento específico que tenga un identificador único, el cual se establece en las etiquetas mediante la propiedad `id=""`. Esto significa que cuando usas un signo de almohadilla seguido de un nombre de identificador, como "#titulo{}", los estilos dentro de ese selector afectarán únicamente al elemento que tenga ese identificador en la página. Por ejemplo, si escribes "#titulo { color: blue; }", solo el elemento con el identificador "titulo" tendrá un color azul. Cabe destacar que, aunque CSS permite aplicar estilos a varios elementos con el mismo ID, esto no semanticamente recomendable, ya que los ID están diseñados para ser únicos e irrepetibles dentro de un documento HTML. */
#titulo{ /**Declaracion de selector por identificador, en este caso se declara el identificador "titulo".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector por identificador.**/

/* Todo - Selectores de cuerpo (body{}): Los selectores de cuerpo se utilizan para aplicar estilos al cuerpo base de la página, como el color de fondo, el margen del cuerpo, el tipo de fuente, el tamaño de fuente, entre otros. Esto significa que, cuando declaras un estilo en "body{}", todos los elementos dentro del cuerpo de la página heredarán esos estilos, a excepción de aquellos que tengan estilos específicos definidos. Es decir, este selector solo afecta el texto o contenido general del cuerpo, pero no las etiquetas que se encuentren dentro de él si tienen sus propios estilos. Por ejemplo, si escribes "body { background-color: lightgray; }", el fondo de toda la página será gris claro, pero si tienes un elemento `<h1>` con un color específico, ese color no cambiará. */
body{ /**Declaracion de selector por cuerpo, en este caso se declara el cuerpo de la página.**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector por cuerpo.**/

/* Todo - Selectores universales (*{}): El selector universal "*" pese a no ser muy recomendado, se utiliza para aplicar estilos a todos los elementos dentro de la página, sin excepción. Esto incluye todo el contenido, como el texto, las imágenes, las etiquetas, etc. A diferencia del selector "body{}", que solo afecta el área del cuerpo de la página, el selector "*" aplica los estilos a todos los elementos, incluidos aquellos fuera del cuerpo (por ejemplo, elementos de encabezado o barra de navegación). Sin embargo, si un elemento tiene estilos específicos definidos por otro selector, estos prevalecerán sobre los estilos del selector universal. Por ejemplo, si escribes "* { margin: 0; padding: 0; }", todos los elementos de la página perderán márgenes y rellenos, sin importar qué tipo de contenido sean. */
*{  /**Declaracion de selector universal, en este caso se declara el selector universal "*".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector universal.**/

/* Todo - Selectores combinados ("nombreElemento.nombreClase{}", "nombreElemento#nombreIdentificador{}", ".mi-clase.mi-clase2{}", ".mi-clase#miIdentificador{}"): Los selectores combinados se usan para aplicar estilos a elementos específicos que tienen una combinación de etiquetas, clases e identificadores. Esto significa que, cuando usas un selector que combina un tipo de elemento, una clase o un ID, como "h1.mi-clase{}", los estilos dentro de ese selector afectarán solo a los elementos que cumplas con ambas especificaciones. Por ejemplo, si escribes "h1.mi-clase { color: blue; }", solo los elementos `<h1>` con la clase "mi-clase" tendrán el color azul. De la misma manera, puedes combinar clases, identificadores o elementos para hacer más específicos los estilos aplicados. */
h2.mi-clase{ /**Declaracion de selector combinado, en este caso se declara la etiqueta <h2> con la clase "mi-clase".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector combinado.**/
h2#miIdentificador{ /**Declaracion de selector combinado, en este caso se declara la etiqueta <h2> con el identificador "miIdentificador".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector combinado.**/
.mi-clase.mi-clase2{ /**Declaracion de selector combinado, en este caso se declara la clase "mi-clase" con la clase "mi-clase2".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector combinado.**/
.mi-clase#miIdentificador{ /**Declaracion de selector combinado, en este caso se declara la clase "mi-clase" con el identificador "miIdentificador".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector combinado.**/

/* Todo - Selector multiple (h1, h2, h3{}): Los selectores múltiples se utilizan para aplicar estilos a varios elementos al mismo tiempo, ya sea del mismo tipo o de diferentes tipos de selectores, como lo son: clase, elemento, identificador y cuerpo. Esto significa que, cuando declaras un estilo en "h1, h2, h3{}", todos los elementos `<h1>`, `<h2>` y `<h3>` en la página heredarán esos estilos. Por ejemplo, si escribes "h1, .mi-clase, #titulo { color: blue; }", todos los elementos <h1>, los elemntos con la clase "mi-clase" y el elemento con el identificador "titulo" tendrán un color de texto azul. */
h1, h2, h3{ /**Declaracion de selector multiple, en este caso se declaran los elementos <h1>, <h2> y <h3>.**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector multiple.**/

h1,.mi-clase{ /**Declaracion de selector multiple, en este caso se declaran los elementos <h1> y la clase "mi-clase".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector multiple.**/

h1,#titulo{ /**Declaracion de selector multiple, en este caso se declaran los elementos <h1> y el identificador "titulo".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector multiple.**/

.mi-clase,#titulo{ /**Declaracion de selector multiple, en este caso se declaran la clase "mi-clase" y el identificador "titulo".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector multiple.**/

h1,.mi-clase,#titulo{ /**Declaracion de selector multiple, en este caso se declaran los elementos <h1>, la clase "mi-clase" y el identificador "titulo".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector multiple.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Prioridad de Aplicación de Estilos Segun el Selector /*
/* Todo - Prioridad de aplicación de estilos: La prioridad de aplicación de estilos en CSS depende de la especificidad de los selectores. Esto significa que cada selector tiene un nivel de importancia al momento de aplicar estilos. Aunque varios selectores puedan aplicar estilos a un mismo elemento, algunos tendrán mayor relevancia que otros. En caso de que varios selectores afecten la misma propiedad de un elemento, el selector con mayor especificidad sobrescribirá los estilos definidos por los selectores con menor prioridad. */
/* &Prioridad baja */
* { /**Selector universal.**/
    /** Las propiedades especificadas aqui aplicaran a todos los elementos de la página.**/
} /**Cierre de selector universal.**/

/* &Prioridad semi baja */
body { /**Selector de cuerpo.**/
    /**Las propiedades especificadas aqui aplicaran al cuerpo de la página.**/
} /**Cierre de selector de cuerpo.**/

/* &Prioridad media */
h1 { /**Selector de elemento.**/
    /**Las propiedades especificadas aqui aplicaran solo a los elementos <h1>.**/
} /**Cierre de selector de elemento.**/

/* &Prioridad media-alta */
.mi-clase { /**Selector de clase.**/
    /**Las propiedades especificadas aqui aplicaran solo a los elementos con la clase "mi-clase".**/
} /**Cierre de selector de clase.**/

/* &Prioridad alta */
h1.mi-clase { /**Selector combinado.**/
    /**Las propiedades especificadas aqui aplicaran a los elementos <h1> que tengan la clase "mi-clase".**/
} /**Cierre de selector combinado.**/

/* &Prioridad muy alta */
#titulo { /**Selector de identificador.**/
    /**Las propiedades especificadas aqui aplicaran solo al elemento con el ID "titulo".**/
} /**Cierre de selector de identificador.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Colores */
/* Todo - Colores por nombre: Los colores por nombre son una forma de especificar un color solido como valor de una propiedad utilizando su nombre en inglés. Existen 147 colores predefinidos que pueden ser utilizados por nombre. Por ejemplo, si se desea que un texto sea rojo, se puede especificar el color "red" en la propiedad "color", pero por el momento solo existe un conjunto limitado de colores que se pueden especificar por nombre. */
.color-por-nombre{
    background-color: crimson;
}

/* Todo - Colores por hexadecimal: Los colores por hexadecimal son una forma de especificar un color como valor de una propiedad utilizandoun código hexadecimal. Cada color tiene un código hexadecimal único que se compone de una combinación de seis caracteres alfanuméricos o en su caso si se selecciona un color hexadecimal con transparencia, se compone de ocho caracteres alfanuméricos. Por ejemplo, si se desea que un texto sea rojo, se puede especificar el color "#ff0000" en la propiedad "color", pero en caso de un color con transparencia se puede especificar el color "#ff0000ff". */
/* ?Propiedades:  
? #: Propiedad que define que el color a asignar en el valor de la propiedad será declarado mediante hexadecimal. */
/* &Hexadecimal estandar */
.color-por-hexadecimal-estandar{
    background-color: #007bff;
}

/* &Hexadecimal con transparencia */
.color-por-hexadecimal-con-transparencia{
    background-color: #fffb005e;
}

/* Todo - Colores por RGB: Los colores por RGB son una forma de especificar un color como valor de una propiedad utilizando el modelo de color RGB. Este modelo se basa en la mezcla de los colores rojo, verde y azul en diferentes proporciones para crear una amplia gama de colores. Cada color se define con un valor entre 0 y 255 para cada uno de los tres colores primarios, por lo que para la seleccion de colores solidos por RGB se utiliza la función rgb(). En caso de seleccionar un color RGB con transparencia, se utiliza la función rgba(). Por ejemplo, si se desea un color solido en un texto se puede especificar el color "rgb(255, 0, 0)" en la propiedad "color", pero en caso de un color con transparencia se puede especificar el color "rgba(255, 0, 0, 0.5)". */
/* &RGB estandar */
/* ?Propiedades:  
? rgb(): Función que permite especificar un color mediante los valores de rojo, verde y azul. Cada valor debe estar entre 0 y 255. */
.color-por-rgb-estandar{
    background-color: rgb(107, 247, 0);
}

/* &RGB con transparencia */
/* ?Propiedades:
? rgba(): Función que permite especificar un color mediante los valores de rojo, verde, azul y un valor de transparencia. Cada valor de color debe estar entre 0 y 255,  mas el valor de transparencia "alpha" el cual debe estar entre 0 y 1. */
.color-por-rgb-con-transparencia{
    background-color: rgba(125, 0, 127, 0.324);
}

/* Todo - Colores por HSL: Los colores por HSL son una forma de especificar un color como valor de una propiedad utilizando el modelo de color HSL. Este modelo se basa en tres componentes la tonalidad (Hue) que representa el color básico, la saturación (Saturation) define la intensidad o pureza del color, y la luminosidad (Lightness) indica qué tan claro o oscuro es el color. Cada color se define con un valor entre 0 y 360 para la tonalidad, entre 0% y 100% para la saturación y la luminosidad, por lo que para la seleccion de colores solidos por RGB se utiliza la función hsl(). En caso de seleccionar un color HSL con transparencia, se utiliza la función hsla(). Por ejemplo, si se desea un color solido en un texto se puede especificar el color "hsl(0, 100%, 50%)" en la propiedad "color", pero en caso de un color con transparencia se puede especificar el color "hsla(0, 100%, 50%, 0.5)". */
/* &HSL estandar */
/* ?Propiedades:
? hsl(): Función que permite especificar un color mediante los valores de tonalidad, saturación y luminosidad. La tonalidad se mide en grados (0 a 360), mientras que la saturación y la luminosidad se miden en porcentajes (0% a 100%). */
.color-por-hsl-estandar{
    background-color: hsl(173, 100%, 50%);
}

/* &HSL con transparencia */
/* ?Propiedades:
? hsla(): Función que permite especificar un color mediante los valores de tonalidad, saturación, luminosidad y un valor de transparencia. La tonalidad se mide en grados (0 a 360), mientras que la saturación y la luminosidad se miden en porcentajes (0% a 100%), mas el valor de transparencia "alpha" el cual debe estar entre 0 y 1. */
.color-por-hsl-con-transparencia{
    background-color: hsla(0, 100%, 50%, 0.219);
}

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Colores */


/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Glosario */
/**
    **RGB: red, green, blue.
**/
