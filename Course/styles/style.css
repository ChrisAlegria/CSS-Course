/* CSS: Es piel, ropa y maquillaje. */
/* CamelCase: El camelCase es una convención de escritura que se utiliza en programación para nombrar variables, funciones, clases, etc. Se escribe en minúsculas y cada palabra adicional comienza con mayúscula. Por ejemplo, "miVariable", "miFuncion", "miClasePersonalizada". */
/* Comentario y comentario multilinea: Texto o codigo que solamente el desarrollador puede ver, ademas estos no tendran ningun efecto en lo que visualiza el usuario, por lo que de manera global y en cualquier lenguaje se puede generar un comentarios con Ctrl + }. */
/* ";": El ";" indica unicamente el final de una declaración, si no se usa, el lenguaje interpretará que la declaración continúa. */
/* Hexadecimal: Es un codigo de 6 letras y numeros que se utilizan para representar colores. */
/* RGB: Es un modelo de color que se basa en la mezcla de los colores rojo, verde y azul, los cuales se combinan en diferentes proporciones para crear una amplia gama de colores. A diferencia de la mezcla de colores en pinturas o tintas, donde los colores se oscurecen al combinarse, en RGB los colores se iluminan más al mezclarse. Este modelo fue diseñado para pantallas y dispositivos digitales, ya que funciona mediante la emisión de luz, donde el color blanco se obtiene combinando los tres colores al máximo nivel y el negro se obtiene con la ausencia de luz. */ 
/* HSL: El modelo de color HSL (Hue, Saturation, Lightness) se basa en tres componentes: tonalidad, saturación y luminosidad, que se combinan en diferentes proporciones para generar una amplia gama de colores. A diferencia del modelo RGB, que se basa en la mezcla de colores primarios, HSL se enfoca en cómo percibimos los colores, lo que lo hace más intuitivo y fácil de usar. En HSL, la tonalidad (Hue) representa el color básico, la saturación (Saturation) define la intensidad o pureza del color, y la luminosidad (Lightness) indica qué tan claro o oscuro es el color. Este modelo es útil para diseñar colores de manera más visual y cercana a cómo los humanos percibimos las variaciones de color. */  
/* Funciones transparencia de colores: La transparencia en los colores permite que un color no sea completamente sólido, sino que se mezcle con el fondo o con otros colores. Esto significa que, si un elemento con color transparente se coloca encima de otro color, ambos se combinarán visualmente, haciendo que el elemento transparente se vea como si mezcláramos su color con el del fondo. Además, un elemento con transparencia también deja ver parcialmente los elementos que están detrás de él. Por ejemplo, si colocas un cuadro rojo semitransparente sobre una imagen de fondo, el cuadro se verá rojo pero permitirá ver la imagen detrás de él. */

/*^CSS*/
/* ? Propiedades de cualquier declaración CSS:
? {}: Toda declaración en CSS, fuera de los estilos directos en etiquetas mediante la propiedad "style", debe ir acompañada de llaves después del selector. Estas llaves permiten declarar los estilos dentro de ellas y actúan como delimitadores, indicando hasta dónde se aplican los estilos a un elemento, clase, etc. 
? ":": Se usan los ":" en la propiedad de la declaracion para separar la propiedad de su valor. Por ejemplo, "color: red;". 
? ";": Se usan los ";" al final de cada declaración para indicar que la declaración ha finalizado. Por ejemplo, "color: red;". */

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Tipos de declaraciones CSS /*
/* Todo - Declaración de estilos mediante una hoja CSS o etiqueta <style>: Los estilos pueden declararse mediante una hoja CSS externa o directamente dentro de la etiqueta <style> en el archivo HTML. En el caso de la hoja CSS, se vincula al HTML mediante un enlace <link>, permitiendo que el HTML lea y aplique todos los estilos definidos en ella. Por otro lado, la etiqueta <style> funciona de manera similar, pero los estilos se colocan directamente dentro del archivo HTML entre las etiquetas <style> y </style>, sin necesidad de archivo externo. */
/* &Estructura de estilos en hoja CSS o etiqueta <style>. */
/* ?Propiedades:  
? Selector: Es el elemento o clase al que se le aplicará el estilo. Por ejemplo, si usas "p", seleccionas todos los párrafos para aplicarles el estilo. Si usas una clase como ".mi-clase", solo los elementos con esa clase recibirán el estilo.
? Propiedad: Es la característica que quieres cambiar en un elemento. Por ejemplo, "color" te permite cambiar el color de algo, y "font-size" te permite cambiar el tamaño del texto. Cada propiedad controla un aspecto diferente del elemento. 
? Valor: Es lo que asignas a una propiedad para definir cómo se comporta. Por ejemplo para "color", usas un valor como "red" para indicar un color, para "font-size", usas un valor como "10px" para indicar el tamaño. Cada propiedad requiere un tipo específico de valor según su función. */ 
.estructura{ /**Selector.**/       
    color: /**Propiedad.**/
    red; /**Valor de la propiedad**/
}

/* Todo - Declaración de estilos en etiqueta HTML mediante la propiedad "style":  Los estilos declarados con la propiedad style="" se aplican exclusivamente a la etiqueta en la que se especifica la propiedad. Dentro de esta propiedad no es necesario usar un selector, ya que el estilo se asigna directamente al elemento en cuestión. */
/* &Estructura de estilos en etiquta HTML mediante la propiedad "style". */
/* ?Propiedades:  
? Propiedad: Es la parte dentro de una etiqueta HTML que se usa para declarar estilos directamente. Por ejemplo, en <p style="">, "style" es la propiedad que indica que dentro de las comillas se escribirán los estilos. 
? Propiedad: Es la característica que quieres cambiar en un elemento. Por ejemplo, "color" te permite cambiar el color de algo, y "font-size" te permite cambiar el tamaño del texto. Cada propiedad controla un aspecto diferente del elemento. 
? Valor: Es lo que asignas a una propiedad para definir cómo se comporta. Por ejemplo para "color", usas un valor como "red" para indicar un color, para "font-size", usas un valor como "10px" para indicar el tamaño. Cada propiedad requiere un tipo específico de valor según su función. *//*
style=" /**Atributo.*
color: /**Propiedad*
red;" /**Valor**/

/* Todo - Declaración: Una declaración es el conjunto de la estructura que incluye el "selector/atributo", la "propiedad" y el "valor de la propiedad**. En CSS, cada declaración se escribe entre llaves {}. */
.declaracion{
color: red; /** Declaración: propiedad + valor **/
}

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Selectores /*
/* Todo - Selectores de elemento (nombreElemento{}): Los selectores de elemento se utilizan para aplicar estilos a todas las instancias de una etiqueta HTML específica. Esto significa que, cuando usas el nombre de una etiqueta, como "h1{}", los estilos dentro de ese selector afectarán a todos los elementos de ese tipo en la página. Por ejemplo, si escribes "h1 { color: red; }", todas las etiquetas <h1> en la página se pondrán rojas. */
h1{ /**Declaracion de selector por elemento, en este caso se declara la etiqueta <h1>.**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector por elemento.**/

/* Todo - Selectores de clase (.nombreClase{}): Los selectores de clase se utilizan para aplicar estilos a un grupo específico de elementos que comparten la misma clase (la cual se establece en las etiquetas mediante la propiedad class=""). Esto significa que, cuando usas un punto seguido de un nombre de clase, como ".mi-clase{}", los estilos dentro de ese selector afectarán a todos los elementos que tengan esa clase en la página. Por ejemplo, si escribes ".mi-clase { font-size: 20px; }", todos los elementos con la clase "mi-clase" tendrán un tamaño de fuente de 20 píxeles, por lo que uno o varios elementos pueden tener la misma clase a los cuales se les aplicaran los mimos estilos. */
.mi-clase{ /**Declaracion de selector por clase, en este caso se declara la clase "mi-clase".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector por clase.**/

/* Todo - Selector de identificador (#nombreIdentificador): Los selectores de identificador se utilizan para aplicar estilos a un elemento específico que tenga un identificador único, el cual se establece en las etiquetas mediante la propiedad `id=""`. Esto significa que cuando usas un signo de almohadilla seguido de un nombre de identificador, como "#titulo{}", los estilos dentro de ese selector afectarán únicamente al elemento que tenga ese identificador en la página. Por ejemplo, si escribes "#titulo { color: blue; }", solo el elemento con el identificador "titulo" tendrá un color azul. Cabe destacar que, aunque CSS permite aplicar estilos a varios elementos con el mismo ID, esto no semanticamente recomendable, ya que los ID están diseñados para ser únicos e irrepetibles dentro de un documento HTML. */
#titulo{ /**Declaracion de selector por identificador, en este caso se declara el identificador "titulo".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector por identificador.**/

/* Todo - Selectores de cuerpo (body{}): Los selectores de cuerpo se utilizan para aplicar estilos al cuerpo base de la página, como el color de fondo, el margen del cuerpo, el tipo de fuente, el tamaño de fuente, entre otros. Esto significa que, cuando declaras un estilo en "body{}", todos los elementos dentro del cuerpo de la página heredarán esos estilos, a excepción de aquellos que tengan estilos específicos definidos. Es decir, este selector solo afecta el texto o contenido general del cuerpo, pero no las etiquetas que se encuentren dentro de él si tienen sus propios estilos. Por ejemplo, si escribes "body { background-color: lightgray; }", el fondo de toda la página será gris claro, pero si tienes un elemento `<h1>` con un color específico, ese color no cambiará. */
body{ /**Declaracion de selector por cuerpo, en este caso se declara el cuerpo de la página.**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector por cuerpo.**/

/* Todo - Selectores universales (*{}): El selector universal "*" pese a no ser muy recomendado, se utiliza para aplicar estilos a todos los elementos dentro de la página, sin excepción. Esto incluye todo el contenido, como el texto, las imágenes, las etiquetas, etc. A diferencia del selector "body{}", que solo afecta el área del cuerpo de la página, el selector "*" aplica los estilos a todos los elementos, incluidos aquellos fuera del cuerpo (por ejemplo, elementos de encabezado o barra de navegación). Sin embargo, si un elemento tiene estilos específicos definidos por otro selector, estos prevalecerán sobre los estilos del selector universal. Por ejemplo, si escribes "* { margin: 0; padding: 0; }", todos los elementos de la página perderán márgenes y rellenos, sin importar qué tipo de contenido sean. */
*{  /**Declaracion de selector universal, en este caso se declara el selector universal "*".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector universal.**/

/* Todo - Selectores combinados ("nombreElemento.nombreClase{}", "nombreElemento#nombreIdentificador{}", ".mi-clase.mi-clase2{}", ".mi-clase#miIdentificador{}"): Los selectores combinados se usan para aplicar estilos a elementos específicos que tienen una combinación de etiquetas, clases e identificadores. Esto significa que, cuando usas un selector que combina un tipo de elemento, una clase o un ID, como "h1.mi-clase{}", los estilos dentro de ese selector afectarán solo a los elementos que cumplas con ambas especificaciones. Por ejemplo, si escribes "h1.mi-clase { color: blue; }", solo los elementos `<h1>` con la clase "mi-clase" tendrán el color azul. De la misma manera, puedes combinar clases, identificadores o elementos para hacer más específicos los estilos aplicados. */
h2.mi-clase{ /**Declaracion de selector combinado, en este caso se declara la etiqueta <h2> con la clase "mi-clase".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector combinado.**/
h2#miIdentificador{ /**Declaracion de selector combinado, en este caso se declara la etiqueta <h2> con el identificador "miIdentificador".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector combinado.**/
.mi-clase.mi-clase2{ /**Declaracion de selector combinado, en este caso se declara la clase "mi-clase" con la clase "mi-clase2".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector combinado.**/
.mi-clase#miIdentificador{ /**Declaracion de selector combinado, en este caso se declara la clase "mi-clase" con el identificador "miIdentificador".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
}   /**Cierre de la declaración de selector combinado.**/

/* Todo - Selector multiple (h1, h2, h3{}): Los selectores múltiples se utilizan para aplicar estilos a varios elementos al mismo tiempo, ya sea del mismo tipo o de diferentes tipos de selectores, como lo son: clase, elemento, identificador y cuerpo. Esto significa que, cuando declaras un estilo en "h1, h2, h3{}", todos los elementos `<h1>`, `<h2>` y `<h3>` en la página heredarán esos estilos. Por ejemplo, si escribes "h1, .mi-clase, #titulo { color: blue; }", todos los elementos <h1>, los elemntos con la clase "mi-clase" y el elemento con el identificador "titulo" tendrán un color de texto azul. */
h1, h2, h3{ /**Declaracion de selector multiple, en este caso se declaran los elementos <h1>, <h2> y <h3>.**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector multiple.**/

h1,.mi-clase{ /**Declaracion de selector multiple, en este caso se declaran los elementos <h1> y la clase "mi-clase".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector multiple.**/

h1,#titulo{ /**Declaracion de selector multiple, en este caso se declaran los elementos <h1> y el identificador "titulo".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector multiple.**/

.mi-clase,#titulo{ /**Declaracion de selector multiple, en este caso se declaran la clase "mi-clase" y el identificador "titulo".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector multiple.**/

h1,.mi-clase,#titulo{ /**Declaracion de selector multiple, en este caso se declaran los elementos <h1>, la clase "mi-clase" y el identificador "titulo".**/
    /**Aqui se especifican las propiedades y sus valores para asigar estilos.**/
} /**Cierre de la declaración de selector multiple.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Prioridad de Aplicación de Estilos Segun el Selector /*
/* Todo - Prioridad de aplicación de estilos: La prioridad de aplicación de estilos en CSS depende de la especificidad de los selectores. Esto significa que cada selector tiene un nivel de importancia al momento de aplicar estilos. Aunque varios selectores puedan aplicar estilos a un mismo elemento, algunos tendrán mayor relevancia que otros. En caso de que varios selectores afecten la misma propiedad de un elemento, el selector con mayor especificidad sobrescribirá los estilos definidos por los selectores con menor prioridad. */
/* &Prioridad baja */
* { /**Selector universal.**/
    /** Las propiedades especificadas aqui aplicaran a todos los elementos de la página.**/
} /**Cierre de selector universal.**/

/* &Prioridad semi baja */
body { /**Selector de cuerpo.**/
    /**Las propiedades especificadas aqui aplicaran al cuerpo de la página.**/
} /**Cierre de selector de cuerpo.**/

/* &Prioridad media */
h1 { /**Selector de elemento.**/
    /**Las propiedades especificadas aqui aplicaran solo a los elementos <h1>.**/
} /**Cierre de selector de elemento.**/

/* &Prioridad media-alta */
.mi-clase { /**Selector de clase.**/
    /**Las propiedades especificadas aqui aplicaran solo a los elementos con la clase "mi-clase".**/
} /**Cierre de selector de clase.**/

/* &Prioridad alta */
h1.mi-clase { /**Selector combinado.**/
    /**Las propiedades especificadas aqui aplicaran a los elementos <h1> que tengan la clase "mi-clase".**/
} /**Cierre de selector combinado.**/

/* &Prioridad muy alta */
#titulo { /**Selector de identificador.**/
    /**Las propiedades especificadas aqui aplicaran solo al elemento con el ID "titulo".**/
} /**Cierre de selector de identificador.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Colores */
/* ~Los colores en CSS se pueden especificar de varias formas, como por nombre, hexadecimal, RGB, HSL, entre otros. Cada forma tiene sus propias características y ventajas, ademas estos pueden ser usados en propiedades como color de texto, color de fondo, color de borde, entre otros. */
/* Todo - Colores por nombre: Los colores por nombre son una forma de especificar un color solido como valor de una propiedad utilizando su nombre en inglés. Existen 147 colores predefinidos que pueden ser utilizados por nombre. Por ejemplo, si se desea que un texto sea rojo, se puede especificar el color "red" en la propiedad "color", pero por el momento solo existe un conjunto limitado de colores que se pueden especificar por nombre. */
.color-por-nombre{ /**Se declara un selector por clase llamado "color-por-nombre".**/
    background-color: crimson; /**Se asigna una propiedad de color de fondo con el valor por nombre "crimson".**/
} /**Cierre de la declaración de selector por clase.**/

/* Todo - Colores por hexadecimal: Los colores por hexadecimal son una forma de especificar un color como valor de una propiedad utilizandoun código hexadecimal. Cada color tiene un código hexadecimal único que se compone de una combinación de seis caracteres alfanuméricos o en su caso si se selecciona un color hexadecimal con transparencia, se compone de ocho caracteres alfanuméricos. Por ejemplo, si se desea que un texto sea rojo, se puede especificar el color "#ff0000" en la propiedad "color", pero en caso de un color con transparencia se puede especificar el color "#ff0000ff". */
/* ?Propiedades:  
? #: Propiedad que define que el color a asignar en el valor de la propiedad será declarado mediante hexadecimal. */
/* &Hexadecimal estandar */
.color-por-hexadecimal-estandar{ /**Se declara un selector por clase llamado "color-por-hexadecimal-estandar".**/
    background-color: #007bff; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#007bff".**/
} /**Cierre de la declaración de selector por clase.**/

/* &Hexadecimal con transparencia */
.color-por-hexadecimal-con-transparencia{ /**Se declara un selector por clase llamado "color-por-hexadecimal-con-transparencia".**/
    background-color: #fffb005e; /**Se asigna una propiedad de color de fondo con el valor hexadecimal con transparencia "#fffb005e".**/
} /**Cierre de la declaración de selector por clase.**/

/* Todo - Colores por RGB: Los colores por RGB son una forma de especificar un color como valor de una propiedad utilizando el modelo de color RGB. Este modelo se basa en la mezcla de los colores rojo, verde y azul en diferentes proporciones para crear una amplia gama de colores. Cada color se define con un valor entre 0 y 255 para cada uno de los tres colores primarios, por lo que para la seleccion de colores solidos por RGB se utiliza la función rgb(). En caso de seleccionar un color RGB con transparencia, se utiliza la función rgba(). Por ejemplo, si se desea un color solido en un texto se puede especificar el color "rgb(255, 0, 0)" en la propiedad "color", pero en caso de un color con transparencia se puede especificar el color "rgba(255, 0, 0, 0.5)". */
/* &RGB estandar */
/* ?Propiedades:   
? rgb(): Función que permite especificar un color mediante los valores de rojo, verde y azul. Cada valor debe estar entre 0 y 255. */
.color-por-rgb-estandar{ /**Se declara un selector por clase llamado "color-por-rgb-estandar".**/
    background-color: rgb(107, 247, 0); /**Se asigna una propiedad de color de fondo con el valor RGB "rgb(107, 247, 0)".**/
} /**Cierre de la declaración de selector por clase.**/

/* &RGB con transparencia */
/* ?Propiedades:
? rgba(): Función que permite especificar un color mediante los valores de rojo, verde, azul y un valor de transparencia. Cada valor de color debe estar entre 0 y 255,  mas el valor de transparencia "alpha" el cual debe estar entre 0 y 1. */
.color-por-rgb-con-transparencia{ /**Se declara un selector por clase llamado "color-por-rgb-con-transparencia".**/
    background-color: rgba(125, 0, 127, 0.324); /**Se asigna una propiedad de color de fondo con el valor RGB con transparencia "rgba(125, 0, 127, 0.324)".**/
} /**Cierre de la declaración de selector por clase.**/

/* Todo - Colores por HSL: Los colores por HSL son una forma de especificar un color como valor de una propiedad utilizando el modelo de color HSL. Este modelo se basa en tres componentes la tonalidad (Hue) que representa el color básico, la saturación (Saturation) define la intensidad o pureza del color, y la luminosidad (Lightness) indica qué tan claro o oscuro es el color. Cada color se define con un valor entre 0 y 360 para la tonalidad, entre 0% y 100% para la saturación y la luminosidad, por lo que para la seleccion de colores solidos por RGB se utiliza la función hsl(). En caso de seleccionar un color HSL con transparencia, se utiliza la función hsla(). Por ejemplo, si se desea un color solido en un texto se puede especificar el color "hsl(0, 100%, 50%)" en la propiedad "color", pero en caso de un color con transparencia se puede especificar el color "hsla(0, 100%, 50%, 0.5)". */
/* &HSL estandar */
/* ?Propiedades:
? hsl(): Función que permite especificar un color mediante los valores de tonalidad, saturación y luminosidad. La tonalidad se mide en grados (0 a 360), mientras que la saturación y la luminosidad se miden en porcentajes (0% a 100%). */
.color-por-hsl-estandar{ /**Se declara un selector por clase llamado "color-por-hsl-estandar".**/
    background-color: hsl(173, 100%, 50%); /**Se asigna una propiedad de color de fondo con el valor HSL "hsl(173, 100%, 50%)".**/
} /**Cierre de la declaración de selector por clase.**/

/* &HSL con transparencia */
/* ?Propiedades:
? hsla(): Función que permite especificar un color mediante los valores de tonalidad, saturación, luminosidad y un valor de transparencia. La tonalidad se mide en grados (0 a 360), mientras que la saturación y la luminosidad se miden en porcentajes (0% a 100%), mas el valor de transparencia "alpha" el cual debe estar entre 0 y 1. */
.color-por-hsl-con-transparencia{ /**Se declara un selector por clase llamado "color-por-hsl-con-transparencia".**/
    background-color: hsla(0, 100%, 50%, 0.219); /**Se asigna una propiedad de color de fondo con el valor HSL con transparencia "hsla(0, 100%, 50%, 0.219)".**/
} /**Cierre de la declaración de selector por clase.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Unidades de medida */
/* ~Las unidades de medida son valores que se utilizan para definir tamaños, distancias, espacios, entre otros aspectos en CSS. Estas unidades permiten especificar dimensiones de manera precisa y relativa, adaptándose a las necesidades de diseño de la página web. */ 
/* &No Relativas */
/* &Las unidades de medida no relativas son valores fijos que se utilizan para definir tamaños, distancias, espacios, entre otros aspectos en CSS. Estas unidades permiten especificar dimensiones de manera precisa y constante, sin importar el tamaño de la pantalla o del contenido. Por lo que estas unidades no se ajustan automáticamente a los cambios en el tamaño de la pantalla o del contenido. */
/* Todo - Unidad de medida no relativa de pixeles (px): La unidad de medida en pixeles (px) es una unidad fija que se utiliza para especificar tamaños, distancias, espacios, entre otros aspectos en CSS. Por lo que un pixel es la unidad más pequeña de medida en una pantalla, y se utiliza para definir tamaños precisos y constantes. Por ejemplo, si se asigna un ancho de 100px a un elemento, este tendrá un ancho de 100 píxeles, independientemente del tamaño de la pantalla o del contenido. */
.unidad-de-medida-no-relativa-pixeles{ /**Se declara un selector por clase llamado "unidad-de-medida-no-relativa-pixeles".**/
    width: 700px; /**Se asigna una propiedad de ancho con el valor de medida en pixeles "100px".**/
    background-color: rgb(155, 255, 118); /**Se asigna una propiedad de color de fondo con el valor RGB "rgb(118, 173, 255)".**/
} /**Cierre de la declaración de selector por clase.**/

/* Todo - Unidad de medida no relativa de altura de tamaño de fuente de letra (ex): La unidad de medida "ex" se utiliza para especificar un tamaño o una posición en relación con la altura de letra "x" segun la fuente del elemento. Esto significa que, si se asigna un valor de 2ex a un ancho, altura o margen, el elemento se ajustará al doble de la altura de letra "x" de la fuente del elemento. Por ejemplo, si la altura de letra "x" es de 16px, un elemento con un ancho de 2ex tendrá un ancho de 32px. */
.unidad-de-medida-no-relativa-ex{ /**Se declara un selector por clase llamado "unidad-de-medida-ex".**/
    font-size: 16px; /**Se asigna una propiedad de tamaño de fuente con el valor de medida en pixeles "16px".**/
    height: 2ex; /**Se asigna una propiedad de margen con el valor de medida no relativa "2ex".**/
    background-color: rgb(155, 255, 118); /**Se asigna una propiedad de color de fondo con el valor RGB "rgb(118, 173, 255)".**/
} /**Cierre de la declaración de selector por clase.**/

/* &Relativas */
/* &Las unidades de medida relativas son valores que se basan en el tamaño de otros elementos, como el tamaño de la fuente, el ancho del contenedor o el tamaño de la ventana del navegador. Estas unidades permiten crear diseños flexibles y adaptables, ya que se ajustan automáticamente a los cambios en el tamaño de la pantalla o del contenido. */
/* Todo - Unidad de medida relativa a el elemento padre (%): La unidad de medida porcentual (%) se utiliza para especificar un tamaño o una posición en relación con el tamaño del elemento padre. Esto significa que, si se asigna un valor de 50% a un ancho, altura o margen, el elemento se ajustará al 50% del tamaño del elemento padre. Por ejemplo, si el elemento padre tiene un ancho de 100px, un elemento hijo con un ancho de 50% tendrá un ancho de 50px. Por ejemplo si un div esta dentro de un section y se establece un ancho de 50% al div, este tendra un ancho de la mitad del section. */
.unidad-de-medida-relativa-porcentual{ /**Se declara un selector por clase llamado "unidad-de-medida-porcentual".**/
    width: 50%; /**Se asigna una propiedad de ancho con el valor de medida porcentual "50%".**/
    background-color: rgb(155, 195, 255); /**Se asigna una propiedad de color de fondo con el valor RGB "rgb(155, 195, 255)".**/
} /**Cierre de la declaración de selector por clase.**/

/* Todo - Unidad de medida relativa al font size del elemento (em): La unidad de medida "em" se utiliza para especificar un tamaño o una posición en relación con el tamaño de la fuente del elemento. Esto significa que, si se asigna un valor de 2em a un ancho, altura o margen, el elemento se ajustará al doble del tamaño de la fuente del elemento. Por ejemplo, si el tamaño de la fuente es de 16px, un elemento con un ancho de 2em tendrá un ancho de 32px. Por ejemplo si se establece un tamaño de fuente de 16px a un parrafo y se establece un margen de 2em, este tendra un margen de 32px. */
.unidad-de-medida-relativa-em{ /**Se declara un selector por clase llamado "unidad-de-medida-em".**/
    font-size: 15px; /**Se asigna una propiedad de tamaño de fuente con el valor de medida en pixeles "16px".**/
    height: 4em; /**Se asigna una propiedad de margen con el valor de medida relativa "2em".**/
    background-color: rgb(155, 195, 255); /**Se asigna una propiedad de color de fondo con el valor RGB "rgb(155, 195, 255)".**/
} /**Cierre de la declaración de selector por clase.**/

/* Todo - Unidad de medida relativa al font size del elemento raiz (rem): La unidad de medida "rem" se utiliza para especificar un tamaño o una posición en relación con el tamaño de la fuente del elemento raíz (html). Esto significa que, si se asigna un valor de 2rem a un ancho, altura o margen, el elemento se ajustará al doble del tamaño de la fuente del elemento raíz. Por ejemplo, si el tamaño de la fuente del elemento raíz es de 16px, un elemento con un ancho de 2rem tendrá un ancho de 32px. Por ejemplo si se establece un tamaño de fuente de 16px al elemento raiz y se establece un margen de 2rem a un parrafo, este tendra un margen de 32px. */
.unidad-de-medida-relativa-rem{
    height: 3rem; /**Se asigna una propiedad de margen con el valor de medida relativa "2rem".**/
    background-color: rgb(155, 195, 255); /**Se asigna una propiedad de color de fondo con el valor RGB "rgb(155, 195, 255)".**/
}

/* Todo - Unidad de medida relativa al 1% de ancho del viewport (vw): La unidad de medida "vw" se utiliza para especificar un tamaño o una posición en relación con el ancho del viewport (ventana del navegador). Esto significa que, si se asigna un valor de 2vw a un ancho, altura o margen, el elemento se ajustará al 2% del ancho de la ventana del navegador. Por ejemplo, si el ancho de la ventana del navegador es de 1000px, un elemento con un ancho de 2vw tendrá un ancho de 20px. Por ejemplo si se establece un ancho de 50vw a un div, este tendra un ancho de la mitad del ancho de la ventana del navegador. */
.unidad-de-medida-relativa-vw{ /**Se declara un selector por clase llamado "unidad-de-medida-vw".**/
    width: 30vw; /**Se asigna una propiedad de ancho con el valor de medida relativa "50vw".**/
    background-color: rgb(155, 195, 255); /**Se asigna una propiedad de color de fondo con el valor RGB "rgb(155, 195, 255)".**/
} /**Cierre de la declaración de selector por clase.**/

/* Todo - Unidad de medida relativa al 1% de alto del viewport (vh): La unidad de medida "vh" se utiliza para especificar un tamaño o una posición en relación con el alto del viewport (ventana del navegador). Esto significa que, si se asigna un valor de 2vh a un ancho, altura o margen, el elemento se ajustará al 2% del alto de la ventana del navegador. Por ejemplo, si el alto de la ventana del navegador es de 500px, un elemento con un alto de 2vh tendrá un alto de 10px. Por ejemplo si se establece un alto de 50vh a un div, este tendra un alto de la mitad del alto de la ventana del navegador. */
.unidad-de-medida-relativa-vh{ /**Se declara un selector por clase llamado "unidad-de-medida-vh".**/
    height: 15vh; /**Se asigna una propiedad de margen con el valor de medida relativa "50vh".**/
    background-color: rgb(155, 195, 255); /**Se asigna una propiedad de color de fondo con el valor RGB "rgb(155, 195, 255)".**/
} /**Cierre de la declaración de selector por clase.**/

/* Todo - Unidad de medida relativa al 1% del lado mas grande del viewport (vmax): La unidad de medida "vmax" se utiliza para especificar un tamaño o una posición en relación con el lado más grande del viewport (ventana del navegador). Esto significa que, si se asigna un valor de 2vmax a un ancho, altura o margen, el elemento se ajustará al 2% del lado más grande de la ventana del navegador. Por ejemplo, si el lado más grande de la ventana del navegador es de 1000px, un elemento con un ancho de 2vmax tendrá un ancho de 20px. Por ejemplo si se establece un ancho de 50vmax a un div, este tendra un ancho de la mitad del lado más grande de la ventana del navegador. */
.unidad-de-medida-relativa-vmax{ /**Se declara un selector por clase llamado "unidad-de-medida-vmax".**/
    width: 20vmax; /**Se asigna una propiedad de ancho con el valor de medida relativa "50vmax".**/
    background-color: rgb(155, 195, 255); /**Se asigna una propiedad de color de fondo con el valor RGB "rgb(155, 195, 255)".**/
} /**Cierre de la declaración de selector por clase.**/

/* Todo - Unidad de medida relativa al 1% del lado mas pequeño del viewport (vmin): La unidad de medida "vmin" se utiliza para especificar un tamaño o una posición en relación con el lado más pequeño del viewport (ventana del navegador). Esto significa que, si se asigna un valor de 2vmin a un ancho, altura o margen, el elemento se ajustará al 2% del lado más pequeño de la ventana del navegador. Por ejemplo, si el lado más pequeño de la ventana del navegador es de 500px, un elemento con un ancho de 2vmin tendrá un ancho de 10px. Por ejemplo si se establece un ancho de 50vmin a un div, este tendra un ancho de la mitad del lado más pequeño de la ventana del navegador. */
.unidad-de-medida-relativa-vmin{ /**Se declara un selector por clase llamado "unidad-de-medida-vmin".**/
    width: 30vmin; /**Se asigna una propiedad de ancho con el valor de medida relativa "50vmin".**/
    background-color: rgb(155, 195, 255); /**Se asigna una propiedad de color de fondo con el valor RGB "rgb(155, 195, 255)".**/
} /**Cierre de la declaración de selector por clase.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Background */
/* ~El fondo de un elemento (background) en CSS se utiliza para personalizar el fondo de un elemento, como un contenedor, una sección o el cuerpo de la página web. El fondo puede ser un color sólido, un degradado de colores, una imagen, o una combinación de estos elementos. */
/* Todo - Background con solido/con transparencia (background-color{}): El color de fondo sólido o con transparencia se utiliza para cambiar el color de fondo de un elemento, como un contenedor, una sección o el cuerpo de la página web. Por lo que se puede especificar un color sólido o un color con transparencia para el fondo de un elemento, ya sea usando colores por nombre, hexadecimal, RGB, HSL, entre otros. */
.background-con-color-solido-transparente{ /**Se declara un selector por clase llamado "background-con-color-solido-transparente".**/
    background-color: orange; /**Se declara una propiedad de color de fondo con el color solido "orange".**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Background con colores degradados (background: linear-gradient()): Los colores degradados se utilizan para crear un efecto visual en el que un color se mezcla gradualmente con otro, podiendo crear transiciónes suaves o abruptas entre dos o más colores. Para crear un degradado de colores, se utiliza la propiedad "background" con la función "linear-gradient()", la cual permite especificar la dirección hacia donde ira el degradado y los colores que se mezclaran, podiendo usar colores por nombre, hexadecimal, RGB, HSL, entre otros. */
/* ?Propiedades:
? linear-gradient(deg, color1, color2, ...): Función que permite crear un degradado de colores en una dirección específica. Se pueden especificar uno o más colores para crear la transición entre ellos. Para definir el degradado se debe especificar la dirección del degradado, usando un ángulo en grados (0deg a 360deg), seguido de los colores que formarán la transición y las posiciones en las que se encontrarán. La posición de cada color se determina en porcentaje, el cual representa el espacio del fondo en base a la dirección del degradado. Por ejemplo, si usas 60% para el primer color, significa que a partir del 60% del fondo del elemento comenzará ese color. Si el siguiente color tiene 62%, el 2% restante (de la diferencia entre 60% y 62%) se utilizará para aplicar el degradado entre los dos colores. Este proceso permite crear transiciones suaves entre los colores a medida que se avanza en el fondo del elemento. */
.background-con-colores-degradados{ /**Se declara un selector por clase llamado "background-con-colores-degradados".**/
    background: linear-gradient(270deg, GreenYellow 0%, rgb(0, 132, 255) 60%, #f048ff 100%); /**Se declara una propiedad de color de fondo con un degradado de colores, usando un color por nombre "green", un color en hexadecimal "#0084ff" y un color RGB "rgb(240, 72, 255)".**/;
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Background con imágenes (background-image{}): Las imágenes de fondo se utilizan para agregar una imagen a un elemento HTML, como un contenedor, una sección o el cuerpo de la página web. Para agregar una imagen de fondo, se usa la propiedad `background-image{}` junto con la función `url()`, donde se coloca la dirección de la imagen que se quiere utilizar. Por defecto, la imagen se insertará con su tamaño original. Si la imagen es muy pequeña para cubrir el ancho o alto del elemento esta se colocara en la esquina superior izquierda del elementp y ademas se repetirá automáticamente para llenar el espacio disponible. De la misma manera, si la imagen es más grande pero no cubre toda la altura del elemento, también se repetirá. */
.background-con-imagen{ /**Se declara un selector por clase llamado "background-con-imagen".**/
    background-image: url('../assets/images/Background_Image_1.jpg'); /**Se declara una propiedad de imagen de fondo con la imagen "kimetsu.jpeg".**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Background con modificacion de repeticion de imagenes (background-repeat{}): La propiedad `background-repeat{}` se utiliza para controlar la repetición de una imagen de fondo en un elemento HTML. Por defecto, las imágenes de fondo se repiten tanto horizontal como verticalmente para cubrir todo el espacio disponible. Sin embargo, esta propiedad permite modificar este comportamiento y definir si la imagen se repite solo en una dirección, en ambas direcciones o no se repite en absoluto. Para definir que solo se repita en X o Y, se puede usar los valores "repeat-x" o "repeat-y", respectivamente. En caso de que no se quiera que la imagen se repita, se puede usar el valor "no-repeat". */
.background-con-modificacion-de-repeticion-de-imagen{ /**Se declara un selector por clase llamado "background-con-modificacion-de-repeticion-de-imagenes".**/
    background-image: url('../assets/images/Background_Image_2.jpg'); /**Se declara una propiedad de imagen de fondo con la imagen "Sunset.jpg".**/
    background-repeat: no-repeat;  /**Se declara una propiedad de repeticion de imagen de fondo con el valor "no-repeat", ocacionando que la imagen no se repita.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Posición de fondo (background-position{}): La propiedad `background-position{}` se utiliza para controlar la posición del fondo en un elemento. Aunque se usa comúnmente con `background-image`, también puede aplicarse a cualquier tipo de fondo, como colores sólidos, degradados, imágenes, entre otros, los cuales no abarquen todo el espacio del elemento. Esta propiedad permite especificar la ubicación exacta donde se mostrará el fondo dentro del elemento HTML. Se puede definir la posición usando valores como arriba (top), abajo (bottom), izquierda (left), derecha (right), centro (center), o en valores personalizados como porcentajes o píxeles. */
.background-con-posicion-de-fondo{ /**Se declara un selector por clase llamado "background-con-posicion-de-imagen".**/
    background-image: url('../assets/images/Background_Image_3.jpg'); /**Se declara una propiedad de imagen de fondo con la imagen "landscape.jpg".**/
    background-color: rgb(205, 218, 239);  /**Se declara una propiedad de color de fondo con el color solido por rgb.**/
    background-repeat: no-repeat;  /**Se declara una propiedad de repeticion de imagen de fondo con el valor "no-repeat", ocacionando que la imagen no se repita.**/
    background-position: center; /**Se declara una propiedad de posicion de imagen de fondo con el valor "center", ocacionando que la imagen se posicione en el centro del elemento.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Fondo con seguimiento (background-attachment{}): La propiedad `background-attachment{}` se utiliza para controlar el comportamiento de un fondo en relación al desplazamiento del contenido de un elemento. Por defecto, el fondo se desplaza junto con el contenido, lo que significa que si el contenido se mueve, el fondo también lo hará. Sin embargo, con esta propiedad puedes modificar ese comportamiento y hacer que el fondo permanezca fijo en su lugar, independientemente de cómo se desplace el contenido. Para mantener el fondo fijo, se utiliza el valor "fixed" el cual mantiene el fondo fijo en relación con la página web, no al elemento en sí. También se puede usar el valor "scroll" (por defecto), que hace que el fondo se desplace con el contenido. */
.background-con-seguimiento-de-fondo{ /**Se declara un selector por clase llamado "background-con-seguimiento-de-fondo".**/
    background-image: url('../assets/images/Background_Image_4.jpg'); /**Se declara una propiedad de imagen de fondo con la imagen "Forest.jpg".**/
    background-repeat: no-repeat;  /**Se declara una propiedad de repeticion de imagen de fondo con el valor "no-repeat", ocacionando que la imagen no se repita.**/
    background-position: center; /**Se declara una propiedad de posicion de imagen de fondo con el valor "center", ocacionando que la imagen se posicione en el centro del elemento.**/
    background-attachment: fixed; /**Se declara una propiedad de seguimiento de imagen de fondo con el valor "fixed", ocacionando que la imagen se mantenga fija en su lugar.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Shorthand de background (background{}): Es una propiedad que engloba todas las propiedades de fondo en una sola declaración. Esto permite definir el color, la imagen, la repetición, la posición y el seguimiento del fondo en un solo lugar en este orden (color, image, repeat, position, attachment). Por lo que nos permite declarar todas estas propiedas sin usar propiedades separadas, lo que facilita la escritura y la lectura del código. Ademas no es necesario integrar todas las propiedades, ya que se pueden omitir algunas si no se desean aplicar. Por lo que la estructura de short-hand de background usando todas las propiedades podria ser background: #000000 url('imagen.jpg') no-repeat center fixed; Por lo que podemos ver que unicamente se usaron los valores de las propiedades que se desean aplicar. */
.background-con-shorthand-de-background{ /**Se declara un selector por clase llamado "background-con-shorthand-de-background".**/
    background: rgb(205, 218, 239) url('../assets/images/Background_Image_5.jpg') no-repeat center scroll; /**Se declara una propiedad de fondo con todas las propiedades en una sola declaración.**/
} /**Cierre de la declaracion de selector por clase.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Borders */
/* ~Los bordes en CSS son líneas que rodean los elementos HTML, como contenedores, secciones, imágenes, entre otros. Los bordes se utilizan para definir los límites de un elemento y para separarlo visualmente de otros elementos en la página web. Los bordes pueden tener diferentes estilos, anchos y colores, lo que permite personalizar su apariencia y darle un aspecto único a los elementos. */
/* Todo - Estilo de bordes (border-style{}): La propiedad `border-style{}` se utiliza para definir el estilo de los bordes de un elemento HTML. Donde mediante valores podemos definir el tipo de borde que se desea aplicar, como sólido, punteado, discontinuo, doble, entre otros. */
.elemento-con-borde{ /**Se declara un selector por clase llamado "elemento-con-borde-solido".**/
    border-style: solid; /**Se declara una propiedad de estilo de borde con el valor "solid", ocacionando que el borde sea solido.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Dotted */
/* &Declara un estilo de borde punteado, lo que significa que el borde es una línea discontinua con puntos pequeños y espacios entre ellos. */
.elemento-con-borde-tipo-dotted{ /**Se declara un selector por clase llamado "elemento-con-borde-punteado".**/
    border-style: dotted; /**Se declara una propiedad de estilo de borde con el valor "dotted", ocacionando que el borde sea punteado.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Dashed */
/* &Declara un estilo de borde discontinuo, lo que significa que el borde es una línea discontinua con segmentos cortos y espacios entre ellos. */
.elemento-con-borde-tipo-dashed{ /**Se declara un selector por clase llamado "elemento-con-borde-discontinuo".**/
    border-style: dashed; /**Se declara una propiedad de estilo de borde con el valor "dashed", ocacionando que el borde sea discontinuo.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Solid */
/* &Declara un estilo de borde solido, lo que significa que el borde es una línea continua y uniforme. */
.elemento-con-borde-tipo-solido{ /**Se declara un selector por clase llamado "elemento-con-borde-solido".**/
    border-style: solid; /**Se declara una propiedad de estilo de borde con el valor "solid", ocacionando que el borde sea solido.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Double */
/* &Declara un estilo de borde doble, lo que significa que el borde tiene dos líneas paralelas que se ejecutan una al lado de la otra. */
.elemento-con-borde-tipo-double{ /**Se declara un selector por clase llamado "elemento-con-borde-doble".**/
    border-style: double; /**Se declara una propiedad de estilo de borde con el valor "double", ocacionando que el borde sea doble.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Groove */
/* &Declara un estilo de borde surcado, lo que significa que el borde tiene un efecto en relieve que da la apariencia de estar tallado en el elemento. */
.elemento-con-borde-tipo-groove{ /**Se declara un selector por clase llamado "elemento-con-borde-surcado".**/
    border-style: groove; /**Se declara una propiedad de estilo de borde con el valor "groove", ocacionando que el borde sea surcado.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Ridge */
/* &Declara un estilo de borde en relieve, lo que significa que el borde tiene un efecto en relieve que da la apariencia de estar sobresalido del elemento. */
.elemento-con-borde-tipo-ridge{ /**Se declara un selector por clase llamado "elemento-con-borde-en-relieve".**/
    border-style: ridge; /**Se declara una propiedad de estilo de borde con el valor "ridge", ocacionando que el borde sea en relieve.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Inset */
/* &Declara un estilo de borde encajado, lo que significa que el borde tiene un efecto en relieve que da la apariencia de estar hundido en el elemento. */
.elemento-con-borde-tipo-inset{ /**Se declara un selector por clase llamado "elemento-con-borde-encajado".**/
    border-style: inset; /**Se declara una propiedad de estilo de borde con el valor "inset", ocacionando que el borde sea encajado.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Outset */
/* &Declara un estilo de borde saliente, lo que significa que el borde tiene un efecto en relieve que da la apariencia de estar sobresalido del elemento. */
.elemento-con-borde-tipo-outset{ /**Se declara un selector por clase llamado "elemento-con-borde-saliente".**/
    border-style: outset; /**Se declara una propiedad de estilo de borde con el valor "outset", ocacionando que el borde sea saliente.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Hidden */
/* &Declara un estilo de borde oculto, lo que significa que el borde no es visible en el elemento. */
.elemento-con-borde-tipo-hidden{ /**Se declara un selector por clase llamado "elemento-con-borde-oculto".**/
    border-style: hidden; /**Se declara una propiedad de estilo de borde con el valor "hidden", ocacionando que el borde sea oculto.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &None */
/* &Declara un estilo de borde nulo, lo que significa que el borde no se aplica al elemento. */
.elemento-con-borde-tipo-none{ /**Se declara un selector por clase llamado "elemento-con-borde-nulo".**/
    border-style: none; /**Se declara una propiedad de estilo de borde con el valor "none", ocacionando que el borde sea nulo.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Mixed */
/* &Declara un estilo de borde mixto, lo que significa que el borde tiene diferentes estilos en cada lado del elemento. Por lo cual podemos definir cualquier estilo de borde para cada lado del elemento, podiendo ser uno diferente para cada lado. asignando un maximo de cuatro comenzando por el lado superior y siguiendo en sentido horario. Quedando de esta manera (arriba, derecha, abajo, izquierda). En caso de que se definan menos de cuatro estilos, los estilos restantes se repetirán en el orden en que se definieron, por lo que si se definen solo dos estilos, el primero se aplicarán al lado superior y derecho, y el segundo en el lado inferior y izquierdo. */
.elemento-con-borde-tipo-mixto{ /**Se declara un selector por clase llamado "elemento-con-borde-tipo-mixto".**/
    border-style: solid ridge dashed double; /**Se declara una propiedad de estilo de borde con el valor "solid dotted dashed double", ocacionando que el borde sea solido en el lado superior, punteado en el lado derecho, discontinuo en el lado inferior y doble en el lado izquierdo.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Color de bordes (border-color{}): La propiedad `border-color{}` se utiliza para definir el color de los bordes de un elemento HTML. Donde mediante valores podemos definir el color que se desea aplicar a los bordes, ya sea por nombre, hexadecimal, RGB, HSL, entre otros. Ademas de que este color se puede aplicar a cualquier tipo de borde, menos al borde nulo, asi como a cualquier grosor de borde. */
.elemento-con-borde-con-color{ /**Se declara un selector por clase llamado "elemento-con-borde-con-color".**/
    border-style: solid; /**Se declara una propiedad de estilo de borde con el valor "solid", ocacionando que el borde sea solido.**/
    border-color: #ee00ff; /**Se declara una propiedad de color de borde con el valor hexadecimal "#ff0000".**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Grosor de bordes (border-width{}): La propiedad `border-width{}` se utiliza para definir el grosor de los bordes de un elemento HTML. Donde mediante valores podemos definir el grosor que se desea aplicar a los bordes,en cualquier unidad de medida. Ademas de que este grosor se puede aplicar a cualquier tipo de borde, menos al borde nulo, asi como a cualquier color de borde. */
.elemento-con-borde-con-grosor{ /**Se declara un selector por clase llamado "elemento-con-borde-con-grosor".**/
    border-style: solid; /**Se declara una propiedad de estilo de borde con el valor "solid", ocacionando que el borde sea solido.**/
    border-width: 6px; /**Se declara una propiedad de grosor de borde con el valor "5px".**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Shorthand de bordes (border{}): Es una propiedad que engloba todas las propiedades de borde en una sola declaración. Esto permite definir el estilo, el grosor y el color de los bordes en general de un elemento HTML en un solo lugar en este orden (width, style, color). Por lo que nos permite declarar todas estas propiedas sin usar propiedades separadas, lo que facilita la escritura y la lectura del código. Ademas no es necesario integrar todas las propiedades, ya que se pueden omitir algunas si no se desean aplicar. Por lo que la estructura de short-hand de border usando todas las propiedades podria ser border: 5px solid #000000; Por lo que podemos ver que unicamente se usaron los valores de las propiedades que se desean aplicar. */
.elemento-con-borde-shorthand{ /**Se declara un selector por clase llamado "elemento-con-borde-shorthand".**/
    border: 5px dotted yellowgreen; /**Se declara una propiedad de borde con todas las propiedades en una sola declaración.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Bordes individuales (border-top{}, border-right{}, border-bottom{}, border-left{}): Las propiedades `border-top{}`, `border-right{}`, `border-bottom{}` y `border-left{}` se utilizan para definir el estilo, el grosor y el color de los bordes individuales de un elemento HTML, ya que a diferencia del estilo mix ya que este es unicamente para definir estilo por lado, estas propiedades permiten definir el estilo, grosor y color de cada borde de manera individual. Donde al igual que en shorhant podemos declarar el estilo, el grosor y el color de cada borde en una sola declaración. */
.elemento-con-modificacion-de-bordes-individuales{ /**Se declara un selector por clase llamado "elemento-con-modificacion-de-bordes-individuales".**/
    border-top: 2px dashed purple; /**Se declara una propiedad de borde superior con todas las propiedades en una sola declaración.**/
    border-right: 5px dotted blue; /**Se declara una propiedad de borde derecho con todas las propiedades en una sola declaración.**/
    border-bottom: 7px double red; /**Se declara una propiedad de borde inferior con todas las propiedades en una sola declaración.**/
    border-left: 6px solid orange;
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Radio de bordes (border-radius{}): La propiedad `border-radius{}` se utiliza para definir el radio de los bordes de un elemento HTML. Lo que significa redondear las esquinas de un elemento con un borde visible aplicado, ya sea un contenedor, una sección o el cuerpo de la página web. Donde mediante valores podemos definir el radio que se desea aplicar a los bordes, en cualquier unidad de medida. Ademas de que este radio se puede aplicar a cualquier tipo de borde, menos al borde nulo, asi como a cualquier color de borde. Ademas de que podemos definir por separado el radio de cada esquina del elemento, ya sea superior izquierda, superior derecha, inferior izquierda o inferior derecha. Asi mismo se puede definir el radio de los bordes de manera individual usando las propiedades `border-top-left-radius{}`, `border-top-right-radius{}`, `border-bottom-left-radius{}` y `border-bottom-right-radius{}`. */
.elemento-con-borde-con-radio{ /**Se declara un selector por clase llamado "elemento-con-borde-con-radio".**/
    border: solid rgb(0, 71, 79); /**Se declara una propiedad de estilo de borde con el valor "solid", ocacionando que el borde sea solido.**/
    border-radius: 50px 10px 0 30px; /**Se declara una propiedad de radio de borde con el valor "50px 10px 0 120px", ocacionando que el radio de las esquinas sea de 50px en la superior izquierda, 10px en la superior derecha, 0 en la inferior izquierda y 30px en la inferior derecha.**/
} /**Cierre de la declaracion de selector por clase.**/

.elemento-con-borde-con-radio-individual{ /**Se declara un selector por clase llamado "elemento-con-borde-con-radio-individual".**/
    border: solid rgb(0, 71, 79); /**Se declara una propiedad de estilo de borde con el valor "solid", ocacionando que el borde sea solido.**/
    border-top-left-radius: 50px; /**Se declara una propiedad de radio de borde superior izquierdo con el valor "50px", ocacionando que el radio de la esquina superior izquierda sea de 50px.**/
    border-top-right-radius: 10px; /**Se declara una propiedad de radio de borde superior derecho con el valor "10px", ocacionando que el radio de la esquina superior derecha sea de 10px.**/
    border-bottom-left-radius: 0; /**Se declara una propiedad de radio de borde inferior izquierdo con el valor "0", ocacionando que el radio de la esquina inferior izquierda sea de 0.**/
    border-bottom-right-radius: 30px; /**Se declara una propiedad de radio de borde inferior derecho con el valor "30px", ocacionando que el radio de la esquina inferior derecha sea de 30px.**/
} /**Cierre de la declaracion de selector por clase.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Margins */
/*  ~Los márgenes en CSS se utilizan para definir el espacio exterior de un elemento, es decir, la distancia entre un elemento y los que lo rodean. Esto ayuda a separar visualmente los elementos y a crear espacios en blanco para mejorar la organización del contenido. Los márgenes pueden aplicarse a cualquier elemento HTML, como contenedores, secciones, imágenes, botones, etc. Se pueden definir de forma individual para cada lado o aplicar un margen general en todas las direcciones. */
/* Todo - Margenes individuales (margin-top{}, margin-right{}, margin-bottom{}, margin-left{}): Las propiedades `margin-top{}`, `margin-right{}`, `margin-bottom{}` y `margin-left{}` se utilizan para definir el margen de un elemento HTML en cada lado de manera individual, modificando de esta manera un lado especifico del elemento. Donde mediante valores podemos definir el margen que se desea aplicar a cada lado, en cualquier unidad de medida. */
.elemento-con-margenes-individuales{ /**Se declara un selector por clase llamado "elemento-con-margenes-individuales".**/
    background-color: #fffd80; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#fffd80".**/
    margin-top: 10px; /**Se declara una propiedad de margen superior con el valor "10px".**/
    margin-right: 250px; /**Se declara una propiedad de margen derecho con el valor "20px".**/
    margin-bottom: 30px; /**Se declara una propiedad de margen inferior con el valor "30px".**/
    margin-left: 20px; /**Se declara una propiedad de margen izquierdo con el valor "40px".**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Margenes con shorthand (margin{}): La propiedad `margin{}` se utiliza para definir el margen de un elemento HTML en todas las direcciones de manera general, modificando de esta manera todos los lados del elemento. Donde mediante valores podemos definir el margen que se desea aplicar a todos los lados, en cualquier unidad de medida. Por lo que para asignar el margen de los cuatro lados se debe seguir el siguiente orden (arriba, derecha, abajo, izquierda). Podiendo quedar de la siguiente manera margin: 10px 20px 30px 40px; haciendo que el margen superior sea de 10px, el margen derecho de 20px, el margen inferior de 30px y el margen izquierdo de 40px. Pero si se ingresa un solo valor, este se aplicará a todos los lados, si se ingresan dos valores, el primero se aplicará al margen superior e inferior, y el segundo al margen derecho e izquierdo, y si se ingresan tres valores, el primero se aplicará al margen superior, el segundo al margen derecho e izquierdo, y el tercero al margen inferior. */
.elemento-con-margenes-shorthand-con-un-valor{ /**Se declara un selector por clase llamado "elemento-con-margenes-shorthand-con-un-valor".**/
    background-color: #fffd80; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#fffd80".**/
    margin: 50px; /**Se declara una propiedad de margen con el valor "10px 20px 30px 40px".**/
} /**Cierre de la declaracion de selector por clase.**/

.elemento-con-margenes-shorthand-con-dos-valores{
    background-color: #fffd80; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#fffd80".**/
    margin: 20px 100px; /**Se declara una propiedad de margen con el valor "10px 20px 30px 40px".**/
} /**Cierre de la declaracion de selector por clase.**/

.elemento-con-margenes-shorthand{ /**Se declara un selector por clase llamado "elemento-con-margenes-shorthand".**/
    background-color: #fffd80;  /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#fffd80".**/
    margin: 50px 60px 30px 170px; /**Se declara una propiedad de margen con el valor "10px 20px 30px 40px".**/
} /**Cierre de la declaracion de selector por clase.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Padding */
/*  ~El padding en CSS es muy similar a margin, pero en este caso se utiliza para definir el espacio interior de un elemento, es decir, la distancia entre el contenido de un elemento y su borde. Esto ayuda a separar visualmente el contenido del borde y a crear espacios en blanco dentro del elemento. El padding puede aplicarse a cualquier elemento HTML, como contenedores, secciones, imágenes, botones, etc. Se pueden definir de forma individual para cada lado o aplicar un padding general en todas las direcciones. */
/* Todo - Paddings individuales (padding-top{}, padding-right{}, padding-bottom{}, padding-left{}): Las propiedades `padding-top{}`, `padding-right{}`, `padding-bottom{}` y `padding-left{}` se utilizan para definir el padding de un elemento HTML en cada lado de manera individual, modificando de esta manera un lado especifico del elemento. Donde mediante valores podemos definir el padding que se desea aplicar a cada lado, en cualquier unidad de medida. */
.elemento-con-paddings-individuales{ /**Se declara un selector por clase llamado "elemento-con-paddings-individuales".**/
    background-color: #e880ff; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#e880ff".**/
    border: solid black; /**Se declara una propiedad de estilo de borde con el valor "solid", ocacionando que el borde sea solido.**/
    padding-top: 10px; /**Se declara una propiedad de padding superior con el valor "10px".**/
    padding-right: 30px; /**Se declara una propiedad de padding derecho con el valor "20px".**/
    padding-bottom: 50px; /**Se declara una propiedad de padding inferior con el valor "30px".**/
    padding-left: 70px; /**Se declara una propiedad de padding izquierdo con el valor "40px".**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Shorthand de paddings (padding{}): La propiedad `padding{}` se utiliza para definir el padding de un elemento HTML en todas las direcciones con diferentes valores al mismo tiempo, modificando de esta manera todos los lados del elemento. Donde mediante valores podemos definir el padding que se desea aplicar a todos los lados, en cualquier unidad de medida. Por lo que para asignar el padding de los cuatro lados se debe seguir el siguiente orden (arriba, derecha, abajo, izquierda). Podiendo quedar de la siguiente manera padding: 10px 20px 30px 40px; haciendo que el padding superior sea de 10px, el padding derecho de 20px, el padding inferior de 30px y el padding izquierdo de 40px. Pero si se ingresa un solo valor, este se aplicará a todos los lados, si se ingresan dos valores, el primero se aplicará al padding superior e inferior, y el segundo al padding derecho e izquierdo, y si se ingresan tres valores, el primero se aplicará al padding superior, el segundo al padding derecho e izquierdo, y el tercero al padding inferior. */
.elemento-con-paddings-shorthand-con-un-valor{ /**Se declara un selector por clase llamado "elemento-con-paddings-shorthand-con-un-valor".**/
    background-color: #e880ff; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#e880ff".**/
    border: solid black; /**Se declara una propiedad de estilo de borde con el valor "solid", ocacionando que el borde sea solido.**/
    padding: 50px; /**Se declara una propiedad de padding con el valor "10px 20px 30px 40px".**/
} /**Cierre de la declaracion de selector por clase.**/ 

.elemento-con-paddings-shorthand-con-dos-valores{
    background-color: #e880ff; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#e880ff".**/
    border: solid black; /**Se declara una propiedad de estilo de borde con el valor "solid", ocacionando que el borde sea solido.**/
    padding: 20px 40px; /**Se declara una propiedad de padding con el valor "10px 20px 30px 40px".**/
}

.elemento-con-paddings-shorthand{ /**Se declara un selector por clase llamado "elemento-con-paddings-shorthand".**/
    background-color: #e880ff; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#e880ff".**/
    border: solid black; /**Se declara una propiedad de estilo de borde con el valor "solid", ocacionando que el borde sea solido.**/
    padding: 10px 20px 30px 40px; /**Se declara una propiedad de padding con el valor "10px 20px 30px 40px".**/
} /**Cierre de la declaracion de selector por clase.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Height/Width */
/* ~El height y width en CSS se utilizan para definir el tamaño de un elemento HTML, es decir, la altura y el ancho del elemento. Esto permite controlar las dimensiones de un elemento y ajustar su tamaño para que se adapte a las necesidades del diseño. Los valores de height y width se pueden definir en diferentes unidades de medida, como píxeles, porcentajes, ems, entre otros. */
/* Todo - Height (height{}): La propiedad `height{}` se utiliza para definir la altura de un elemento HTML. Donde mediante valores podemos definir la altura que se desea aplicar al elemento, en cualquier unidad de medida. */
.elemento-con-altura{ /**Se declara un selector por clase llamado "elemento-con-altura".**/
    background-color: #f7ff80; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#80ff80".**/
    height: 100px; /**Se declara una propiedad de altura con el valor "200px".**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Width (width{}): La propiedad `width{}` se utiliza para definir el ancho de un elemento HTML. Donde mediante valores podemos definir el ancho que se desea aplicar al elemento, en cualquier unidad de medida. */
.elemento-con-ancho{ /**Se declara un selector por clase llamado "elemento-con-ancho".**/
    background-color: #f7ff80; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#80ff80".**/
    width: 400px; /**Se declara una propiedad de ancho con el valor "300px".**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Height y Width Minimos (min-height{}, min-width{}): Las propiedades `min-height{}` y `min-width{}` se utilizan para definir la altura y el ancho mínimos de un elemento HTML, respectivamente. Donde mediante valores podemos definir la altura y el ancho mínimos que se desea aplicar al elemento, en cualquier unidad de medida. Por lo que el tamaño minimo en el heght tomara dicho valor minimo si no hay contenido que lo haga crecer, y el width tomara el maximo, esto debido a que es un elemento de bloque el cual se expandira hasta el maximo posible, siempre que pueda. */
.elemento-con-altura-minima{ /**Se declara un selector por clase llamado "elemento-con-altura-minima".**/
    background-color: #80ffb9; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#80ff80".**/
    min-height: 100px; /**Se declara una propiedad de altura minima con el valor "200px".**/
} /**Cierre de la declaracion de selector por clase.**/

.elemento-con-ancho-minimo{ /**Se declara un selector por clase llamado "elemento-con-ancho-minimo".**/
    background-color: #80ffb9; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#80ff80".**/
    min-width: 200px; /**Se declara una propiedad de ancho minimo con el valor "300px".**/
} /**Cierre de la declaracion de selector por clase.**/

.elemento-con-ancho-y-alto-minimo{
    background-color: #80ffb9; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#80ff80".**/
    min-height: 100px; /**Se declara una propiedad de altura minima con el valor "200px".**/
    min-width: 200px; /**Se declara una propiedad de ancho minimo con el valor "300px".**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Heigh y Width Maximos (max-height{}, max-width{}): Las propiedades `max-height{}` y `max-width{}` se utilizan para definir la altura y el ancho máximos de un elemento HTML, respectivamente. Donde mediante valores podemos definir la altura y el ancho máximos que se desea aplicar al elemento, en cualquier unidad de medida. Por lo que el tamaño maximo en el heght tomara dicho valor maximo si no hay contenido que lo haga crecer, y el width tomara el maximo, esto debido a que es un elemento de bloque el cual se expandira hasta el maximo posible, siempre que pueda. Por lo que si el contenido supera el maximo, el contenido se saldra del elemento ya que este no se expandira mas, ademas si no se establece un min y no hay contenido dentro del elemento este se reducira hasta tocar sus bordes, por ejemplo si se establece un max en height y no hay contenido dentro del elemento, este se reducira hasta tocar sus bordes en el borde superior e inferior e igualmente pasa con el width, por lo que si se establece un max en height y no hay contenido dentro del elemento, este se reducira hasta tocar sus bordes en el borde izquierdo y derecho. */
.elemento-con-altura-maxima{ /**Se declara un selector por clase llamado "elemento-con-altura-maxima".**/
    background-color: #d0a2ff; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#80ff80".**/
    max-height: 200px; /**Se declara una propiedad de altura maxima con el valor "200px".**/
} /**Cierre de la declaracion de selector por clase.**/

.elemento-con-ancho-maximo{ /**Se declara un selector por clase llamado "elemento-con-ancho-maximo".**/
    background-color: #d0a2ff; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#80ff80".**/
    max-width: 700px; /**Se declara una propiedad de ancho maxima con el valor "300px".**/
} /**Cierre de la declaracion de selector por clase.**/

.elemento-con-ancho-y-alto-maximo{ /**Se declara un selector por clase llamado "elemento-con-ancho-y-altura-maxima".**/
    background-color: #d0a2ff; /**Se asigna una propiedad de color de fondo con el valor hexadecimal "#80ff80".**/
    max-height: 25px; /**Se declara una propiedad de altura maxima con el valor "200px".**/
    max-width: 300px; /**Se declara una propiedad de ancho maxima con el valor "300px".**/
} /**Cierre de la declaracion de selector por clase.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Texto */
/* ~El texto en CSS se refiere a la forma en que se presenta el contenido textual en una página web. Esto incluye la tipografía, el tamaño, el color, el espaciado y otros aspectos visuales del texto. CSS permite personalizar la apariencia del texto para que se ajuste al diseño y estilo de la página web. */
/* Todo -  Color de texto (color{}): La propiedad `color{}` se utiliza para definir el color del texto de un elemento HTML. Donde mediante valores podemos definir el color que se desea aplicar al texto, ya sea por nombre, hexadecimal, RGB, HSL, entre otros. */
.elemento-con-color-de-texto{ /**Se declara un selector por clase llamado "elemento-con-color-de-texto".**/
    color: #ff7700; /**Se declara una propiedad de color de texto con el valor hexadecimal "#ff0000".**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Alineamiento de texto (text-align{}): Por defecto el texto siempre se alinea a la izquierda, pero mediante la propiedad `text-align{}` podemos definir la alineación del texto de un elemento HTML. Donde mediante valores podemos definir la alineación que se desea aplicar al texto, como izquierda, derecha, centro o justificar. */
.elemento-con-alineacion-de-texto-a-la-izquierda{ /**Se declara un selector por clase llamado "elemento-con-alineacion-de-texto".**/
    text-align: left; /**Se declara una propiedad de alineación de texto con el valor "center", ocacionando que el texto se alinee al centro.**/
} /**Cierre de la declaracion de selector por clase.**/

.elemento-con-alineacion-de-texto-centrado{ /**Se declara un selector por clase llamado "elemento-con-alineacion-de-texto".**/
    text-align: center; /**Se declara una propiedad de alineación de texto con el valor "center", ocacionando que el texto se alinee al centro.**/
} /**Cierre de la declaracion de selector por clase.**/

.elemento-con-alineacion-a-la-derecha{ /**Se declara un selector por clase llamado "elemento-con-alineacion-a-la-derecha".**/
    text-align: right; /**Se declara una propiedad de alineación de texto con el valor "center", ocacionando que el texto se alinee al centro.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Formato de subrayado de texto: El formato de subrayado de texto se refiere a la forma en que se aplica el subrayado a un texto en CSS. Esto incluye la aplicación de diferentes estilos de subrayado, como subrayado simple, doble, tachado, sobrelineado, asi como las porpiedades del mismo, como el color y el grosor. */
/* ^Subrayado de texto (text-decoration-line{}): La propiedad `text-decoration-line{}` se utiliza para definir el estilo de subrayado de un elemento HTML. Donde mediante valores podemos definir el estilo que se desea aplicar al subrayado, como subrayado simple, doble, tachado, sobrelineado, entre otros. */
/* &Underline */
/* &Declara un estilo de subrayado, lo que significa que el texto tendrá una línea debajo de él. */
.elemento-con-text-decoration-underline{ /**Se declara un selector por clase llamado "elemento-con-text-decoration-underline".**/
    text-decoration-line: underline; /**Se declara una propiedad de subrayado de texto con el valor "underline", ocacionando que el texto se subraye.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Line-through */
/* &Declara un estilo de tachado, lo que significa que el texto tendrá una línea a través de él. */ 
.elemento-con-text-decoration-line-throught{ /**Se declara un selector por clase llamado "elemento-con-text-decoration-line-throught".**/
    text-decoration-line: line-through; /**Se declara una propiedad de tachado de texto con el valor "line-through", ocacionando que el texto se tache.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Overline */
/* &Declara un estilo de sobrelineado, lo que significa que el texto tendrá una línea encima de él. */
.elemento-con-text-decoration-overline{ /**Se declara un selector por clase llamado "elemento-con-text-decoration-overline".**/
    text-decoration-line: overline; /**Se declara una propiedad de subrayado de texto con el valor "underline", ocacionando que el texto se subraye.**/
} /**Cierre de la declaracion de selector por clase.**/

/* ^Color de subrayado de texto (text-decoration-color{}): La propiedad `text-decoration-color{}` se utiliza para definir el color del subrayado de un elemento HTML. Donde mediante valores podemos definir el color que se desea aplicar al subrayado, ya sea por nombre, hexadecimal, RGB, HSL, entre otros. */
.elemento-con-text-decoration-con-color{ /**Se declara un selector por clase llamado "elemento-con-text-decoration-de-color".**/
    text-decoration-line: underline; /**Se declara una propiedad de subrayado de texto con el valor "underline", ocacionando que el texto se subraye.**/
    text-decoration-color: rgb(255, 0, 0); /**Se declara una propiedad de color de subrayado de texto con el valor "red", ocacionando que el subrayado sea rojo.**/
}

/* ^Estilo del subrayado de texto(text-decoration-style{}): La propiedad `text-decoration-style{}` se utiliza para definir el estilo del subrayado de un elemento HTML. Donde mediante valores podemos definir el estilo que se desea aplicar al subrayado podiendo utilizar solido, punteado, discontinuo, entre otros. */
/* &Dotted */
/* &Declara un estilo de subrayado punteado, lo que significa que el subrayado será una serie de puntos. */
.elemento-con-text-decoration-style-dashed{ /** Se declara un selector por clase llamado "elemento-con-text-decoration-style-dashed".**/
    text-decoration-line: underline; /***Se declara una propiedad de subrayado de texto con el valor "underline", ocacionando que el texto se subraye.**/
    text-decoration-style: dashed; /**Se declara una propiedad de estilo de subrayado de texto con el valor "dashed", ocacionando que el subrayado sea discontinuo.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Dashed */
/* &Declara un estilo de subrayado discontinuo, lo que significa que el subrayado será una serie de líneas discontinuas. */
.elemento-con-text-decoration-style-dotted{ /**Se declara un selector por clase llamado "elemento-con-text-decoration-style-dotted".**/
    text-decoration-line: underline; /**Se declara una propiedad de subrayado de texto con el valor "underline", ocacionando que el texto se subraye.**/
    text-decoration-style: dotted; /**Se declara una propiedad de estilo de subrayado de texto con el valor "dotted", ocacionando que el subrayado sea punteado.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Solid */
/* &Declara un estilo de subrayado solido, lo que significa que el subrayado será una línea continua. */
.elemento-con-text-decoration-style-solid{
    text-decoration-line: underline; /**Se declara una propiedad de subrayado de texto con el valor "underline", ocacionando que el texto se subraye.**/
    text-decoration-style: solid; /**Se declara una propiedad de estilo de subrayado de texto con el valor "solid", ocacionando que el subrayado sea solido.**/
}

/* &Double */
/* &Declara un estilo de subrayado doble, lo que significa que el subrayado será una serie de dos líneas continuas. */
.elemento-con-text-decoration-style-double{ /**Se declara un selector por clase llamado "elemento-con-text-decoration-style-double".**/
    text-decoration-line: underline; /**Se declara una propiedad de subrayado de texto con el valor "underline", ocacionando que el texto se subraye.**/
    text-decoration-style: double; /**Se declara una propiedad de estilo de subrayado de texto con el valor "double", ocacionando que el subrayado sea doble.**/
} /**Cierre de la declaracion de selector por clase.**/
/* &wavy */
/* &Declara un estilo de subrayado ondulado, lo que significa que el subrayado será una serie de líneas onduladas. */
.elemento-con-text-decoration-style-wavy{ /**Se declara un selector por clase llamado "elemento-con-text-decoration-style-gavy".**/
    text-decoration-line: underline; /**Se declara una propiedad de subrayado de texto con el valor "underline", ocacionando que el texto se subraye.**/
    text-decoration-style: wavy; /**Se declara una propiedad de estilo de subrayado de texto con el valor "wavy", ocacionando que el subrayado sea ondulado.**/
} /**Cierre de la declaracion de selector por clase.**/

/* ^Grosor del subrayado de texto (text-decoration-thickness{}): La propiedad `text-decoration-thickness{}` se utiliza para definir el grosor del subrayado de un elemento HTML. Donde mediante valores podemos definir el grosor que se desea aplicar al subrayado, en cualquier unidad de medida. */
.elemento-con-text-decoration-con-grosor{ /**Se declara un selector por clase llamado "elemento-con-text-decoration-thickness".**/
    text-decoration-line: underline; /**Se declara una propiedad de subrayado de texto con el valor "underline", ocacionando que el texto se subraye.**/
    text-decoration-thickness: 5px; /**Se declara una propiedad de grosor de subrayado de texto con el valor "5px", ocacionando que el subrayado sea de 5px.**/
} /**Cierre de la declaracion de selector por clase.**/

/* ^Formato de subrayado de texto con shorthand (text-decoration{}): La propiedad `text-decoration{}` se utiliza para definir el formato del subrayado de un elemento HTML. Donde se puede definir lo antes mencionado, como el tipo del subrayado, el color del subrayado, el grosor del subrayado y el estilo de subrayado. Por lo que mediante valores podemos definir el formato que se desea aplicar al subrayado, en cualquier unidad de medida. Por ende se debe de declarar el formato de subrayado de la siguiente manera: text-decoration: underline red 5px solid; donde el primer valor es el tipo de subrayado, el segundo valor es el estilo del subrayado, el tercer valor es el color del subrayado y el cuarto valor es el grosor del subrayado. */
.elemento-con-text-decoration-shorthand{ /**Se declara un selector por clase llamado "elemento-con-text-decoration-shorthand".**/
    text-decoration: overline dotted rgb(200, 0, 255) 3px ; /**Se declara una propiedad de formato de subrayado de texto con el valor "underline red 5px solid", ocacionando que el subrayado sea de tipo subrayado, color rojo, grosor de 5px y estilo solido.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Transformacion de texto (text-transform{}): La propiedad `text-transform{}` se utiliza para definir la transformación del texto de un elemento HTML. Donde mediante valores podemos convertir el texto elemento a mayúsculas, minúsculas, capitalizar la primera letra de cada palabra o dejarlo sin transformación. Esto aplica incluso si se usaron tanto mayusculas como minusculas al mismo tiempo en el texto del elemento. */
/* &Uppercase */
/* &Declara un estilo de texto en mayúsculas, lo que significa que el texto se mostrará en mayúsculas. */
.elemento-con-text-transform-uppercase{ /**Se declara un selector por clase llamado "elemento-con-text-transform-uppercase".**/
    text-transform: uppercase; /**Se declara una propiedad de transformación de texto con el valor "uppercase", ocacionando que el texto se muestre en mayúsculas.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Lowercase */
/* &Declara un estilo de texto en minúsculas, lo que significa que el texto se mostrará en minúsculas. */
.elemento-con-text-transform-lowercase{
    text-transform: lowercase; /**Se declara una propiedad de transformación de texto con el valor "lowercase", ocacionando que el texto se muestre en minúsculas.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Capitalize */
/* &Declara un estilo de texto capitalizado, lo que significa que la primera letra de cada palabra se mostrará en mayúsculas. */
.elemento-con-text-transform-capitalize{ /**Se declara un selector por clase llamado "elemento-con-text-transform-capitalize".**/
    text-transform: capitalize; /**Se declara una propiedad de transformación de texto con el valor "capitalize", ocacionando que la primera letra de cada palabra se muestre en mayúsculas.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Sangria de texto (text-indent{}): La propiedad `text-indent{}` se utiliza para definir la sangría del texto de un elemento HTML. Donde mediante valores podemos definir la sangría que se desea aplicar al texto, en cualquier unidad de medida. Por lo que la sangria se aplicara al primer renglon del texto del elemento. Dicha sangria afecta unicamente a la primera linea del texto del elemento. */
.elemento-con-text-indent{ /**Se declara un selector por clase llamado "elemento-con-text-indent".**/
    text-indent: 50px; /**Se declara una propiedad de sangria de texto con el valor "50px", ocacionando que la sangria del texto sea de 50px.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Espaciado entre letras (letter-spacing{}): La propiedad `letter-spacing{}` se utiliza para definir el espaciado entre letras de un elemento HTML. Donde mediante valores podemos definir el espaciado que se desea aplicar entre letras, en cualquier unidad de medida. Asi mismo se podran utilizar valores negativos, lo que hara que el espaciado entre letras sea menor al normal. */
.elemento-con-letter-spacing-positivo{ /**Se declara un selector por clase llamado "elemento-con-letter-spacing-positivo".**/
    letter-spacing: 10px; /**Se declara una propiedad de espaciado entre letras con el valor "10px", ocacionando que el espaciado entre letras sea de 10px.**/
} /**Cierre de la declaracion de selector por clase.**/  

.elemento-con-letter-spacing-negativo{ /**Se declara un selector por clase llamado "elemento-con-letter-spacing-negativo".**/ 
    letter-spacing: -2px; /**Se declara una propiedad de espaciado entre letras con el valor "-10px", ocacionando que el espaciado entre letras sea de -2px.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Espaciado entre palabras (word-spacing{}): La propiedad `word-spacing{}` se utiliza para definir el espaciado entre palabras de un elemento HTML. Donde mediante valores podemos definir el espaciado que se desea aplicar entre palabras, en cualquier unidad de medida. */
.elemento-con-word-spacing-positivo{ /**Se declara un selector por clase llamado "elemento-con-word-spacing-positivo".**/
    word-spacing: 10px; /**Se declara una propiedad de espaciado entre palabras con el valor "10px", ocacionando que el espaciado entre palabras sea de 10px.**/
} /**Cierre de la declaracion de selector por clase.**/

.elemento-con-word-spacing-negativo{ /**Se declara un selector por clase llamado "elemento-con-word-spacing-negativo".**/
    word-spacing: -4px; /**Se declara una propiedad de espaciado entre palabras con el valor "-4px", ocacionando que el espaciado entre palabras sea de -2px.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Espaciado entre lineas (line-height{}): La propiedad `line-height{}` se utiliza para definir el espaciado entre una linea y otra de un elemento HTML. Donde mediante valores podemos definir el espaciado que se desea aplicar entre lineas, en cualquier unidad de medida. Por lo que el espaciado entre lineas se aplicara a todas las lineas del texto del elemento. */
.elemento-con-line-height{
    line-height: 50px;
}

/* Todo- Texto no limitado a contenedor (white-space{}): La propiedad `white-space{}` se utiliza para definir el comportamiento del texto dentro de un elemento HTML. Donde mediante valores podemos definir el comportamiento que se desea aplicar al texto, como por ejemplo si se desea que el texto se ajuste al ancho del contenedor, si se desea que el texto se mantenga en una sola línea, si se desea que el texto se ajuste al ancho del contenedor y se mantenga en una sola línea, entre otros. */
/* &Nowrap */
/* &Declara un comportamiento de texto sin ajuste, lo que significa que el texto no se ajustará al ancho del contenedor y se mantendrá en una sola línea siempre. */
.elemento-con-white-space-nowrap{ /**Se declara un selector por clase llamado "elemento-con-white-space-nowrap".**/
    white-space: nowrap; /**Se declara una propiedad de comportamiento de texto con el valor "nowrap", ocacionando que el texto no se ajuste al ancho del contenedor y se mantenga en una sola línea.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Pre */
/* &Declara un comportamiento de texto preformateado, lo que significa que el texto se mostrará tal como se escribió en el código HTML, incluyendo espacios y saltos de línea. */
.elemento-con-white-space-pre{ /**Se declara un selector por clase llamado "elemento-con-white-space-pre".**/
    white-space: pre; /**Se declara una propiedad de comportamiento de texto con el valor "pre", ocacionando que el texto se muestre tal como se escribió en el código HTML, incluyendo espacios y saltos de línea.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Pre-wrap */
/* &Declara un comportamiento de texto preformateado con ajuste, lo que significa que el texto se mostrará tal como se escribió en el código HTML, incluyendo espacios y saltos de línea, pero se ajustará al ancho del contenedor. */
.elemento-con-white-space-prewrap{ /**Se declara un selector por clase llamado "elemento-con-white-space-prewrap".**/
    white-space: pre-wrap; /**Se declara una propiedad de comportamiento de texto con el valor "pre-wrap", ocacionando que el texto se muestre tal como se escribió en el código HTML, incluyendo espacios y saltos de línea, pero se ajustará al ancho del contenedor.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Sombra de texto (text-shadow{}): La propiedad `text-shadow{}` se utiliza para definir la sombra de un texto de un elemento HTML. Donde mediante valores podemos definir la sombra que se desea aplicar al texto, en cualquier unidad de medida. Por lo que la sombra se aplicara a todo el texto del elemento. Declaracion de la sombra cuenta con cuatro valores, donde el primer valor es el desplazamiento horizontal de la sombra, el segundo valor es el desplazamiento vertical de la sombra, el tercer valor es el difuminado de la sombra y el cuarto valor es el color de la sombra. Por lo que si se desea una sombra sin difuminado se puede omitir el tercer valor. De igual manera se pueden estrablecer mas de una sombra al mismo tiempo, separando cada sombra con una coma y declarando cada sombra con los cuatro valores antes mencionados. */
.elemento-con-un-text-shadow{ /**Se declara un selector por clase llamado "elemento-con-un-text-shadow".**/
    text-shadow: 7px 7px 4px black; /**Se declara una propiedad de de sombreado de texto con el valor "text-shadow" , ocacionando que el texto tenga una sombra de 7px de desplazamiento horizontal, 7px de desplazamiento vertical y 4px de difuminado.**/
} /**Cierre de la declaración de selector por clase.**/

.elemento-con-dos-text-shadow{ /**Se declara un selector por clase llamado "elemento-con-dos-text-shadow".**/
    text-shadow: 5px 25px 5px black, 10px 10px 2px red; /**Se declara una propiedad de de sombreado de texto con el valor "text-shadow" , ocacionando que el texto tenga dos sombras, la primera sombra tiene un desplazamiento horizontal de 5px, un desplazamiento vertical de 25px y un difuminado de 5px, y la segunda sombra tiene un desplazamiento horizontal de 10px, un desplazamiento vertical de 10px y un difuminado de 2px.**/
} /**Cierre de la declaración de selector por clase.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Fuentes */
/* ~La fuente en CSS se refiere al estilo y apariencia del texto en una página web. Esto incluye la elección de la familia de fuentes, el tamaño, el peso, el estilo y otros aspectos visuales de la tipografía. CSS permite personalizar la apariencia de las fuentes para que se ajusten al diseño y estilo de la página web. */
/* Todo -  Familia de fuente de texto (font-family{}): La propiedad `font-family{}` se utiliza para definir la familia de fuente de un elemento HTML. Donde mediante valores podemos definir la familia de fuente que se desea aplicar al texto, como Arial, Helvetica, Times New Roman, entre otros. Cabe mencionar que cada opcion contiene varias fuentes, por lo que si no se encuentra la fuente especifica, el navegador buscara la siguiente en la lista. Por lo que si se desea utilizar una fuente personalizada, se debe de importar la fuente desde un archivo externo o desde una URL. */
/* &Disponible en el sistema */
/* &Declara una familia de fuente disponible en el sistema, lo que significa que el texto se mostrará con la fuente especificada. */
.elemento-con-font-family-del-sistema{ /**Se declara un selector por clase llamado "elemento-con-font-family".**/
    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif; /**Se declara una propiedad de familia de fuente con el valor "Arial", ocacionando que la fuente del texto sea Arial. Adicionalmente se agregan otras fuentes como respaldo, en caso de que la fuente principal no esté disponible.**/
} /**Cierre de la declaracion de selector por clase.**/

/*&Externa */
/* &Declara una familia de fuente externa, lo que significa que el texto se mostrará con la fuente especificada. */
.elemento-con-font-family-externa{
    font-family: "Dancing Script", cursive;
}

/* Todo - Estilo de fuente (font-style{}): La propiedad `font-style{}` se utiliza para definir el estilo de fuente de un elemento HTML. Donde mediante valores podemos definir el estilo que se desea aplicar a la fuente, como normal o cursiva. */
/* &Italic */
/* &Declara un estilo de fuente en cursiva, lo que significa que el texto se mostrará en cursiva. */
.elemento-con-font-style-italic{ /**Se declara un selector por clase llamado "elemento-con-font-style-italic".**/
    font-style: italic; /**Se declara una propiedad de estilo de fuente con el valor "italic", ocacionando que la fuente del texto sea en cursiva.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Normal */
/* &Declara un estilo de fuente normal, lo que significa que el texto se mostrara con el estilo por defecto. */
.elemento-con-font-style-normal{ /**Se declara un selector por clase llamado "elemento-con-font-style-normal".**/
    font-style: normal; /**Se declara una propiedad de estilo de fuente con el valor "normal", ocacionando que la fuente del texto sea normal.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Peso de fuente (font-weight{}): La propiedad `font-weight{}` se utiliza para definir el peso de fuente de un elemento HTML. Donde mediante valores podemos definir el peso que se desea aplicar a la fuente, como normal o negrita */
/* &Bold */
/* &Declara un peso de fuente en negrita, lo que significa que el texto se mostrará en negrita. */
.elemento-con-font-weight-bold{ /**Se declara un selector por clase llamado "elemento-con-font-weight-bold".**/
    font-weight: bold; /**Se declara una propiedad de peso de fuente con el valor "bold", ocacionando que la fuente del texto sea en negrita.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Normal */
/* &Declara un peso de fuente normal, lo que significa que el texto se mostrara con el peso por defecto. */
.elemento-con-font-weight-normal{ /**Se declara un selector por clase llamado "elemento-con-font-weight-normal".**/
    font-weight: normal; /**Se declara una propiedad de peso de fuente con el valor "normal", ocacionando que la fuente del texto sea normal.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Variante de fuente (font-variant{}): La propiedad `font-variant{}` se utiliza para definir la variante de fuente de un elemento HTML. Donde mediante valores podemos definir la variante que se desea aplicar a la fuente, como normal o pequeña mayúscula. Esto significa que el texto se mostrará en mayúsculas, pero con un tamaño de fuente más pequeño que el resto del texto. */
/* &Small-caps */
/* &Declara una variante de fuente en mayúsculas pequeñas, lo que significa que el texto se mostrará en mayúsculas pequeñas. */
.elemento-con-font-variant-small-caps{ /**Se declara un selector por clase llamado "elemento-con-font-variant-small-caps".**/
    font-variant: small-caps; /**Se declara una propiedad de variante de fuente con el valor "small-caps", ocacionando que la fuente del texto sea en mayúsculas pequeñas.**/
} /**Cierre de la declaracion de selector por clase.**/

/* &Normal */
/* &Declara una variante de fuente normal, lo que significa que el texto se mostrara con la variante por defecto. */
.elemento-con-font-variant-normal{ /**Se declara un selector por clase llamado "elemento-con-font-variant-normal".**/
    font-variant: normal; /**Se declara una propiedad de variante de fuente con el valor "normal", ocacionando que la fuente del texto sea normal.**/
} /**Cierre de la declaracion de selector por clase.**/

/* Todo - Tamaño de fuente (font-size{}): La propiedad `font-size{}` se utiliza para definir el tamaño de fuente de un elemento HTML. Donde mediante valores podemos definir el tamaño que se desea aplicar a la fuente, en cualquier unidad de medida. Por lo que el tamaño de fuente se aplicara a todo el texto del elemento. Dicho tamaño se puede declarar mediante cualquier unidad de medida, como px, em, rem, %, entre otros, ademas de poder utilizar palabras reservadas como "large", "medium", "small", entre otros. Que significan grande, mediano y pequeño respectivamente. */
.elemento-con-font-size{ /**Se declara un selector por clase llamado "elemento-con-font-size".**/
    font-size: smaller; /**Se declara una propiedad de tamaño de fuente con el valor "large", ocacionando que la fuente del texto sea grande.**/
} /**Se declara una propiedad de tamaño de fuente con el valor "large", ocacionando que la fuente del texto sea grande.**/

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Listas */


/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
/* ~Glosario */
/**
    **RGB: red, green, blue.
**/
